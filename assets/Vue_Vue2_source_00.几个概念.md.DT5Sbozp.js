import{_ as s,c as i,o as a,a1 as n}from"./chunks/framework.yskgK-vV.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Vue/Vue2/source/00.几个概念.md","filePath":"Vue/Vue2/source/00.几个概念.md"}'),l={name:"Vue/Vue2/source/00.几个概念.md"},e=n(`<h3 id="_01-虚拟-dom" tabindex="-1">01. 虚拟 DOM <a class="header-anchor" href="#_01-虚拟-dom" aria-label="Permalink to &quot;01. 虚拟 DOM&quot;">​</a></h3><h4 id="_1-基本概念" tabindex="-1">（1）基本概念 <a class="header-anchor" href="#_1-基本概念" aria-label="Permalink to &quot;（1）基本概念&quot;">​</a></h4><ul><li><p>虚拟 DOM，即<code>Virtual DOM</code>，是用<code>JS</code>对象来对真实的 DOM 进行抽象，是一个普通的 JavaScript 对象，用来描述真实的 DOM，是对真实 DOM 的抽象</p></li><li><p>基本语法：</p></li></ul><h4 id="_2-实现原理" tabindex="-1">（2）实现原理 <a class="header-anchor" href="#_2-实现原理" aria-label="Permalink to &quot;（2）实现原理&quot;">​</a></h4><ul><li><p>虚拟 DOM 的实现原理主要包括以下 3 部分：</p><ul><li>用<code>JavaScript </code>对象模拟真实的 <code>DOM</code> 树，对真实 <code>DOM</code> 进行抽象</li><li><code>diff</code> 算法：用于比较两棵虚拟 DOM 树的差异</li><li><code>pach</code> 算法：用于将两个虚拟<code>DOM</code>对象的差异应用到真正的<code>DOM</code>树</li></ul></li><li><p>Virtual Dom 算法简述</p><ul><li><p>建立 V-DOM</p><ul><li>通过 JS 对象模拟 DOM 对象</li></ul></li><li><p>判断差异算法</p><ul><li>首先从上至下，从左往右遍历对象，也就是树的深度遍历，这一步中会给每个节点添加索引，便于最后渲染差异</li><li>一旦节点有子元素，就去判断子元素是否有不同</li></ul><blockquote><p>树的递归算法：</p><ol><li>新的节点的 <code>tagName</code> 或者 <code>key</code> 和旧的不同，这种情况代表需要替换旧的节点，并且也<u>不再需要遍历新旧节点的子元素</u>了，因为整个旧节点都被删掉了</li><li>新的节点的 <code>tagName</code> 和 <code>key</code>（可能都没有）和旧的节点相同，判断属性是否变更，然后开始遍历子树</li><li>没有新的节点，那么什么都不用做</li></ol><hr><p>判断属性的更改：</p><ol><li>遍历旧的属性列表，查看每个属性是否还存在于新的属性列表中</li><li>遍历新的属性列表，判断两个列表中都存在的属性的值是否有变化</li><li>在第二步中同时查看是否有属性不存在于旧的属性列列表中</li></ol><hr><p>判断列表差异算法：</p><ol><li>遍历旧的节点列表，查看每个节点是否还存在于新的节点列表中</li><li>遍历新的节点列表，判断是否有新的节点</li><li>在第二步中同时判断节点是否有移动</li></ol><hr><p>遍历子元素打标识：</p><ol><li>判断两个列表差异</li><li>给节点打上标记</li></ol></blockquote></li><li><p>渲染</p><ul><li>深度遍历树，将需要做变更操作的取出来</li><li>局部更新 DOM</li></ul></li></ul></li></ul><h3 id="_02-vue-双向数据绑定" tabindex="-1">02. Vue 双向数据绑定？ <a class="header-anchor" href="#_02-vue-双向数据绑定" aria-label="Permalink to &quot;02. Vue 双向数据绑定？&quot;">​</a></h3><ul><li>Vue 的双向数据绑定主要是指：<strong>数据变化更新视图，视图变化更新数据</strong></li></ul><blockquote><p>其中，View 变化更新 Data ，可以通过<u><strong>事件监听</strong></u>的方式来实现</p><p>所以 Vue 的数据双向绑定的工作主要是：<u><strong>如何根据 Data 变化更新 View</strong></u></p></blockquote><ul><li><p>vue 的双向数据绑定是<u>通过<strong>数据劫持</strong>结合 <strong>发布订阅模式</strong>的方式来实现的</u></p><ul><li>通过<code>Object.defineProperty()</code>来劫持各个属性的<code>set</code>和<code>get</code>方法</li><li>在数据变动时，订阅器会发布消息给订阅者，订阅者收到通知会触发相应的监听回调</li></ul></li><li><p>Vue 主要通过以下 4 个步骤来实现数据双向绑定的：</p><ul><li>（1）<strong>实现一个监听器 <code>Observer</code></strong><ul><li>对数据对象进行遍历，包括子属性对象的属性，利用 <code>Object.defineProperty()</code> 给属性都加上<code> setter()</code>和 <code>getter()</code></li><li>这样的话，给这个对象的某个值赋值，就会触发 <code>setter</code>，那么就能监听到数据变化</li></ul></li><li>（2）<strong>实现一个解析器 <code>Compile</code></strong><ul><li>解析 Vue 模板指令，将模板中的变量都替换成数据</li><li>然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数</li><li>添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新</li></ul></li><li>（3）<strong>实现一个订阅者 <code>Watcher</code></strong><ul><li>Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁</li><li>主要任务是：订阅 Observer 中的属性值变化的消息</li><li>当收到属性值变化的消息时，会<u>触发解析器 Compile 中对应的更新函数</u></li></ul></li><li>（4）<strong>实现一个订阅器 <code>Dep</code></strong><ul><li>订阅器采用 <strong>发布-订阅</strong> 设计模式，用来收集订阅者 Watcher，对监听器 Observer 和 订阅者 Watcher 进行统一管理</li></ul></li></ul></li><li><p>实现代码</p><ul><li><p>监听器<code>Observer</code>：在有变化时，发出通知</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;yck&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data.name; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -&gt; get value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;yyy&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -&gt; change value</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 判断类型：如果不是对象类型，就直接返回</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 遍历对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 调用 defineReactive 方法，为所有属性添加 set 和 get 响应式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    defineReactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, key, obj[key]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineReactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 递归子属性</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(val);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 将属性改为响应式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, key, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    enumerable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    configurable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactiveGetter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;get value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactiveSetter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;change value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newVal;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div></li><li><p>订阅器<code>Dep</code>：接收通知</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li></ul><h3 id="_03-render-函数" tabindex="-1">03. render 函数 <a class="header-anchor" href="#_03-render-函数" aria-label="Permalink to &quot;03. render 函数&quot;">​</a></h3><h4 id="_1-什么是-render-函数-它的使用场景是什么" tabindex="-1">（1）什么是 Render 函数，它的使用场景是什么？ <a class="header-anchor" href="#_1-什么是-render-函数-它的使用场景是什么" aria-label="Permalink to &quot;（1）什么是 Render 函数，它的使用场景是什么？&quot;">​</a></h4><ul><li>说到 Render 函数，就要说到虚拟 DOM（Virtual DOM）,Virtual DOM 并不是真正意义上的 DOM，而是一个轻量级的 JavaScript 对象，在状态发生变化时，Virtual DOM 会进行 Diff 运算，来更新只需要被替换的 DOM，而不是全部重绘。</li><li>它的使用场景，就是完全发挥 JavaScript 的编程能力，有时需要结合 JSX 来使用。</li></ul><h4 id="_2-createelement-是什么" tabindex="-1">（2）createElement 是什么？ <a class="header-anchor" href="#_2-createelement-是什么" aria-label="Permalink to &quot;（2）createElement 是什么？&quot;">​</a></h4><ul><li><p>createElement 是 Render 函数的核心，它构成了 Vue Virtual DOM 的模板</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // {String | Object | Function}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 一个 HTML 标签，组件选项，或一个函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 必须 return 上述其中一个</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // {Object}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 一个对应属性的数据对象，可选</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 您可以在 template 中使用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 详细的属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // {String | Array}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 子节点（VNodes），可选</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;h1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello world&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyComponent, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            props: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                someProps: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;bar&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div></li></ul><h4 id="_3-render-函数有哪些常用的参数" tabindex="-1">（3）Render 函数有哪些常用的参数？ <a class="header-anchor" href="#_3-render-函数有哪些常用的参数" aria-label="Permalink to &quot;（3）Render 函数有哪些常用的参数？&quot;">​</a></h4><ul><li>常用的参数，主要是指上面第二个参数里的值了</li></ul>`,16),p=[e];function t(h,r,k,d,E,c){return a(),i("div",null,p)}const g=s(l,[["render",t]]);export{u as __pageData,g as default};
