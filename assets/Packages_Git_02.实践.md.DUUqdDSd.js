import{_ as e,c as i,o as a,a1 as l}from"./chunks/framework.yskgK-vV.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Packages/Git/02.实践.md","filePath":"Packages/Git/02.实践.md"}'),t={name:"Packages/Git/02.实践.md"},c=l('<h3 id="_01-正常流程" tabindex="-1">01. 正常流程 <a class="header-anchor" href="#_01-正常流程" aria-label="Permalink to &quot;01. 正常流程&quot;">​</a></h3><ul><li>初始化 <ul><li><code>git init</code></li></ul></li><li>暂存 <ul><li>暂存所有文件：<code>git add .</code></li><li>暂存单个文件：<code>git add fileName</code></li></ul></li><li>提交 <ul><li><code>git commit -m &#39;commitMessage&#39;</code></li></ul></li><li>拉取 <ul><li><code>git pull</code></li></ul></li><li>推送 <ul><li><code>git push</code></li></ul></li></ul><h3 id="_02-创建分支" tabindex="-1">02. 创建分支 <a class="header-anchor" href="#_02-创建分支" aria-label="Permalink to &quot;02. 创建分支&quot;">​</a></h3><ul><li>开发新功能： <ul><li>从当前分支<code>checkout</code>一个新分支出来</li><li><code>git checkout feature/new</code></li></ul></li></ul><h3 id="_03-git-merge合并分支" tabindex="-1">03. <code>git merge</code>合并分支 <a class="header-anchor" href="#_03-git-merge合并分支" aria-label="Permalink to &quot;03. `git merge`合并分支&quot;">​</a></h3><ul><li><p>合并功能分支到原分支</p></li><li><p>先切回到原分支：<code>git branch dev</code></p></li><li><p>合并新分支到原分支：<code>git merge feature/new</code></p></li><li><p>会产生一条<code>Merge Commit</code>记录</p></li><li><p>终止合并</p><ul><li><code>git merge --abort</code></li></ul></li></ul><h3 id="_04-git-rebase变基分支" tabindex="-1">04. <code>git rebase</code>变基分支 <a class="header-anchor" href="#_04-git-rebase变基分支" aria-label="Permalink to &quot;04. `git rebase`变基分支&quot;">​</a></h3><ul><li><p>命令：<code>git rebase branchName</code></p></li><li><p>示例：</p><ul><li>当前所在分支：<code>currentBranch</code></li><li>最新目标分支：<code>targetBranch</code></li><li>需要<code>rebase</code>变基目标分支<code>targetBranch</code>到当前所在分支<code>currentBranch</code></li><li>即将目标分支上的新的提交记录，再在当前分支上的末尾重新生成提交记录</li><li>使用：<code>git rebase targetBranch</code></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当前分支 currentBranch, commit 为 a b c d e</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 目标分支 targetBranch, commit 为 a b f g h</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git rebase targetBranch</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当前分支 currentBranch commit 变为 a b f g h c d e</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>以哪个分支为基，就在哪个分支上执行<code>rebase</code></p></blockquote></li><li><p>终止变基</p><ul><li><code>git rebase --abort</code></li></ul></li><li><p>变基之后，可能会出现本地与远端的提交记录不一致的情况</p><ul><li>这个时候需要强制推送<code>git push -f</code>，需要谨慎操作</li></ul></li></ul>',8),s=[c];function o(r,n,d,p,u,h){return a(),i("div",null,s)}const b=e(t,[["render",o]]);export{m as __pageData,b as default};
