import{_ as i,c as l,o as s,a1 as a}from"./chunks/framework.yskgK-vV.js";const e="/note/assets/%E5%BC%BA%E7%BC%93%E5%AD%98.Cw5DRSq0.png",n="/note/assets/%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98.D_5POKPE.png",t="/note/assets/DNS%E8%A7%A3%E6%9E%90.BqiVfEn7.png",o="/note/assets/TCP.iBqRlqUL.png",r="/note/assets/TCP2.DX3nd4xN.png",y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"JS/JavaScript/ECMAScript进阶/02.输入URL.md","filePath":"JS/JavaScript/ECMAScript进阶/02.输入URL.md"}'),p={name:"JS/JavaScript/ECMAScript进阶/02.输入URL.md"},h=a(`<h2 id="javascript-开始" tabindex="-1">JavaScript 开始 <a class="header-anchor" href="#javascript-开始" aria-label="Permalink to &quot;JavaScript 开始&quot;">​</a></h2><blockquote><p>这个问题涉及知识非常多，非常大</p><p>每个部分都可以延伸很多知识点</p><p>这里仅作简单介绍</p></blockquote><h3 id="_01-输入-url-到页面加载" tabindex="-1">01. 输入 URL 到页面加载 <a class="header-anchor" href="#_01-输入-url-到页面加载" aria-label="Permalink to &quot;01. 输入 URL 到页面加载&quot;">​</a></h3><h4 id="_1-输入网址" tabindex="-1">（1）输入网址 <a class="header-anchor" href="#_1-输入网址" aria-label="Permalink to &quot;（1）输入网址&quot;">​</a></h4><ul><li>首先，浏览器会判断用户的输入是否是一个<strong>合法的 URL</strong><ul><li>如果不是合法的 URL 地址，就会使用浏览器默认的<strong>搜索引擎</strong>，与用户输入的内容，合并生成一个合法的 URL</li></ul></li><li>然后，浏览器会访问这个地址</li></ul><h4 id="_2-url-解析" tabindex="-1">（2）URL 解析 <a class="header-anchor" href="#_2-url-解析" aria-label="Permalink to &quot;（2）URL 解析&quot;">​</a></h4><ul><li>获取到第一步的 URL 后，浏览器会<strong>解析</strong>出该 URL 的协议、主机、端口、路径等信息，并<strong>构造一个 HTTP 请求</strong></li></ul><h4 id="_3-检查缓存" tabindex="-1">（3）检查缓存 <a class="header-anchor" href="#_3-检查缓存" aria-label="Permalink to &quot;（3）检查缓存&quot;">​</a></h4><ul><li><p>浏览器发送请求前，会判断是否命中<strong>强缓存</strong></p><ul><li>如果命中了强缓存，则直接从缓存获取资源，不会发送请求</li></ul></li><li><p>否则，浏览器会发送请求，并判断是否命中<strong>协商缓存</strong></p><ul><li>如果命中了协商缓存，则直接从缓存获取资源，返回状态码为<strong>304</strong></li></ul></li><li><p>如果没有命中强缓存和协商缓存，则直接从服务端获取资源</p></li></ul><h4 id="_4-dns解析" tabindex="-1">（4）<code>DNS</code>解析 <a class="header-anchor" href="#_4-dns解析" aria-label="Permalink to &quot;（4）\`DNS\`解析&quot;">​</a></h4><ul><li><p><code>DNS</code>解析就是，通过<code>URL</code>解析出来的主机域名，去查找域名对应的<strong>IP 地址</strong></p><ul><li>每个域名都会对应一个<code>IP</code>地址</li></ul></li><li><p><code>DNS</code>解析<strong>过程</strong>：</p><ul><li><p>递归查询：我们的浏览器、操作系统、路由器都会缓存一些 URL 对应的 IP 地址，统称为 DNS 高速缓存</p><blockquote><p><strong>浏览器缓存</strong> &lt;——&gt; <strong>系统缓存</strong> &lt;——&gt; <strong>路由器缓存</strong> &lt;——&gt; ISP<strong>缓存</strong></p></blockquote></li><li><p>迭代查询：</p><ul><li>局部的<code>DNS</code>服务器并不会自己向其他服务器进行查询</li><li>而是把能够解析该域名的服务器<code>IP</code>地址返回给客户端</li><li>客户端会不断的向这些服务器进行查询</li><li>直到查询到了位置</li><li><strong>迭代查询只会帮你找到相关的服务器，由客户端自己去向这些服务器查询</strong></li></ul><blockquote><p><strong>根域名服务器</strong> &lt; <strong>顶级域名服务器</strong> &lt; <strong>主机域名服务器</strong></p></blockquote></li></ul></li></ul><h4 id="_5-http-请求" tabindex="-1">（5）HTTP 请求 <a class="header-anchor" href="#_5-http-请求" aria-label="Permalink to &quot;（5）HTTP 请求&quot;">​</a></h4><ul><li><p>通过<strong>TCP 三次握手</strong>建立<code>TCP/IP</code>连接</p></li><li><p>连接建立之后，浏览器会<strong>构建 HTTP 请求</strong>，向服务器发动请求信息</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">请求行：请求方式</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">请求路径</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HTTP版本号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">请求头：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">空行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">请求体：</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h4 id="_6-服务器处理请求" tabindex="-1">（6）服务器处理请求 <a class="header-anchor" href="#_6-服务器处理请求" aria-label="Permalink to &quot;（6）服务器处理请求&quot;">​</a></h4><ul><li><p>服务器接收请求信息后，会根据请求信息生成响应数据，并发送给网络进程，网络进程接收响应信息后就开始解析响应头的内容</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">响应行：HTTP版本号</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">状态码</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">状态说明</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">响应头：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">空行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">响应体：</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h4 id="_7-浏览器渲染页面" tabindex="-1">（7）浏览器渲染页面 <a class="header-anchor" href="#_7-浏览器渲染页面" aria-label="Permalink to &quot;（7）浏览器渲染页面&quot;">​</a></h4><ul><li>渲染页面过程 <ul><li>解析过程：解析 HTML 构建<strong>DOM 树</strong>；解析 CSS，构建<strong>CSSOM 树</strong></li><li>生成<strong>布局树</strong><code>Render Tree</code>：根据<strong>DOM 树</strong>和<strong>CSSOM 树</strong>生成<strong>布局树 Render Tree</strong></li><li><strong>布局阶段</strong><code>Layout</code>：计算渲染树节点的<strong>确切位置和大小</strong></li><li><strong>绘制阶段</strong><code>Painting</code>：将渲染树转换成像素渲染到屏幕上</li></ul></li></ul><h4 id="_8-断开连接" tabindex="-1">（8）断开连接 <a class="header-anchor" href="#_8-断开连接" aria-label="Permalink to &quot;（8）断开连接&quot;">​</a></h4><ul><li>通过 TCP 四次挥手断开连接</li></ul><h3 id="_02-其它问题" tabindex="-1">02. 其它问题 <a class="header-anchor" href="#_02-其它问题" aria-label="Permalink to &quot;02. 其它问题&quot;">​</a></h3><h4 id="_1-url-组成" tabindex="-1">（1）URL 组成 <a class="header-anchor" href="#_1-url-组成" aria-label="Permalink to &quot;（1）URL 组成&quot;">​</a></h4><ul><li><p><strong>URL</strong>组成：由<strong>协议</strong>、<strong>主机</strong>、<strong>端口</strong>、<strong>路径</strong>、<strong>查询参数</strong>、<strong>锚点</strong>6 部分组成</p><ul><li><code>https://</code>、<code>localhost</code>、<code>:8080</code>、<code>/index.html</code>、<code>?name=ruovan</code>、<code>#top</code></li><li><code>协议://主机:端口/路径?查询参数#锚点</code></li></ul></li><li><p>为什么要进行 URL 解析？</p><ul><li>为了保证用户发起的请求是一个完整的、有效的 URL 地址</li></ul></li></ul><h4 id="_2-浏览器缓存" tabindex="-1">（2）浏览器缓存 <a class="header-anchor" href="#_2-浏览器缓存" aria-label="Permalink to &quot;（2）浏览器缓存&quot;">​</a></h4><h5 id="a-强缓存" tabindex="-1">（a）<strong>强缓存</strong> <a class="header-anchor" href="#a-强缓存" aria-label="Permalink to &quot;（a）**强缓存**&quot;">​</a></h5><ul><li><p>通过<code>cache-control</code>和<code>expires</code>来判断是否命中强缓存，<code>Cache-Control</code>优先级高于<code>Expires</code></p><ul><li><p><code>cache-control</code>：一段时间</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Control</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: max</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3600</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 表示在当前响应返回的\`3600s\`之后过期</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Control</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: private </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 表示只有浏览器能缓存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Control</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: no</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cache </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 表示不缓存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Control</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: no</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">store </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 表示不进行任何形式的缓存</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p><code>expires</code>：一个日期</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Expires</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Wed, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Nov </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2022</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 08</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">41</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GMT</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 表示资源会在 2022年11月22日8点41分 过期</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li><li><p>命中缓存后，返回缓存中的资源，</p><ul><li>在请求面板可以看到，强缓存是<code>from disk cache</code>或者<code>from memory cache</code></li></ul></li></ul><img src="`+e+'" width="50%"><h5 id="b-协商缓存" tabindex="-1">（b）<strong>协商缓存</strong> <a class="header-anchor" href="#b-协商缓存" aria-label="Permalink to &quot;（b）**协商缓存**&quot;">​</a></h5><blockquote><p>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程</p></blockquote><ul><li>通过<code>If-Modified-Since</code>和<code>If-None-Match</code>判断是否命中<strong>协商缓存</strong></li><li>服务器通过<code>Etag</code>和<code>Last-Modify</code>来确认协商缓存是否更改</li><li><strong>Last-modify</strong>：表示最后修改时间 <ul><li>在浏览器第一次给服务器发送请求后，服务器会在<strong>响应头</strong>中加上这个字段</li><li>浏览器接收到后，如果再次请求，会在<strong>请求头</strong>中携带<strong>If-Modified-Since</strong>字段</li><li>这个字段的值就是<strong>Last-Modify</strong>的值，也就是服务器传来的最后修改时间</li><li>服务器拿到请求头中的<strong>If-Modified-Since</strong>字段后，会和服务器中<strong>该资源的最后修改时间</strong>作对比</li><li>如果请求头中的这个值小于最后修改时间，则表示资源更新了，需要返回更新后的资源，返回<strong>200</strong>状态码</li><li>否则，资源没有更新，返回<strong>304</strong>状态，告诉浏览器直接用缓存</li></ul></li><li><strong>ETag</strong>：是服务器根据当前文件的内容，给文件生成的唯一标识，只要文件内容有改动，这个值就会变化 <ul><li>服务器会在<strong>响应头</strong>中加上这个字段</li><li>浏览器接收到后，会在下次请求时，会在请求头中携带<strong>If-None-Match</strong>字段</li><li>这个字段的值就是<strong>ETag</strong>的值</li><li>服务器接收到<strong>If-None-Match</strong>后，会与服务器上该资源的<strong>ETag</strong>进行比对</li><li>如果两者不一致，表示文件更新了，返回新的资源，返回<strong>200</strong>状态码</li><li>否则，返回<strong>304</strong>，使用缓存资源</li></ul></li></ul><img src="'+n+'" width="50%"><h5 id="c-缓存位置" tabindex="-1">（c）<strong>缓存位置</strong> <a class="header-anchor" href="#c-缓存位置" aria-label="Permalink to &quot;（c）**缓存位置**&quot;">​</a></h5><ul><li><strong>Service Worker</strong></li><li><strong>Memory Cache</strong>：内存缓存，速度快</li><li><strong>Disk Cache</strong>：磁盘缓存，容量大，存储长</li><li><strong>Push Cache</strong>：推送缓存</li></ul><blockquote><ul><li>比较大的 JS、CSS 文件会直接被放入磁盘缓存，反之放入内存</li><li>内存使用率加高的时候，文件优先进入磁盘缓存</li></ul></blockquote><h5 id="d-补充" tabindex="-1">（d）补充 <a class="header-anchor" href="#d-补充" aria-label="Permalink to &quot;（d）补充&quot;">​</a></h5><ul><li>打开网页后：会先查找<code>Disk Cache</code>中是否有匹配的资源：如果有则使用，没有则发送网络请求获取资源</li><li><strong>F5</strong>——普通刷新：因 TAB 没关闭，因此<code>Memory Cache</code>是可用的，会被优先使用，其次才是<code>Disk Cache</code></li><li><strong>Ctrl + F5</strong>——强制刷新：浏览器不使用缓存，因此发送的请求头部均带有<code>Cache-control: no-cache</code>，服务器直接返回<code>200</code>和最新内容</li></ul><hr><h4 id="_3-dns-解析" tabindex="-1">（3）DNS 解析 <a class="header-anchor" href="#_3-dns-解析" aria-label="Permalink to &quot;（3）DNS 解析&quot;">​</a></h4><ul><li><p>两个查询</p><ul><li>递归查询</li><li>迭代查询</li></ul></li><li><p>DNS 解析的<strong>优化</strong>：</p><ul><li><strong>DNS 预解析</strong><ul><li>对于大型网站，有多个不同服务器资源的情况下，都可以采取 DNS 预解析，提前解析，以减少页面卡顿</li></ul></li><li><strong>DNS 负载均衡</strong><ul><li>当一个完整访问量过大时，使用多个服务器地址进行优化</li><li>DNS 服务器根据不同的查询返回不同的解析结果，即返回<strong>不同的 IP 地址</strong></li></ul></li></ul></li><li><p>服务器拆分的优势</p><ul><li>资源的合理利用</li><li>抗压能力加强</li><li>提高 HTTP 并发</li></ul></li></ul><img src="'+t+'" width="50%"><h4 id="_4-三次握手" tabindex="-1">（4）三次握手 <a class="header-anchor" href="#_4-三次握手" aria-label="Permalink to &quot;（4）三次握手&quot;">​</a></h4><ul><li><p>TCP 三次握手：</p><ul><li>第一次握手：确认客服端的<strong>发送能力</strong></li><li>第二次握手：确认服务端的<strong>发送能力和接收能力</strong></li><li>第三次握手：确认客户端的<strong>接收能力</strong></li></ul></li><li><p>为什么需要三次握手？</p><ul><li>为了防止，已经失效的，连接请求报文，突然又传送到了服务端，而导致的错误</li><li>就是，客户端可能因为网络阻塞的问题，重新发起请求</li><li>而服务端接收到这个请求后，会发起一个确认响应，但没有客户端来接收，所以会一直等待在那里，从而造成资源浪费的问题</li></ul><blockquote><ul><li>两次握手，服务器不能确认客户端收到请求了，容易出现丢包的现象</li></ul></blockquote></li><li><p>其它</p><ul><li>seq 序号，用来标识从 TCP 源端向目的端发送的字节流，发起方发送数据时对此进行标记</li><li>ack 确认序号，只有 ACK 标志位为 1 时，确认序号字段才有效，ack=seq+1</li><li>标志位 <ul><li>ACK：确认序号有效</li><li>RST：重置连接</li><li>SYN：发起一个新连接</li><li>FIN：释放一个连接</li></ul></li></ul></li></ul><img src="'+o+`" width="50%"><h4 id="_5-http1-0、http1-1、http2-0" tabindex="-1">（5）HTTP1.0、HTTP1.1、HTTP2.0 <a class="header-anchor" href="#_5-http1-0、http1-1、http2-0" aria-label="Permalink to &quot;（5）HTTP1.0、HTTP1.1、HTTP2.0&quot;">​</a></h4><ul><li><p><strong>HTTP1.0 和 HTTP1.1 的一些区别</strong></p><ul><li>缓存处理 <ul><li><code>HTTP1.0</code>：主要使用<code>Last-Modified</code>、<code>Expires</code>来做为缓存判断的标准</li><li><code>HTTP1.1</code>：引入了更多的缓存控制策略：<code>ETag</code>、<code>Cache-Control</code></li></ul></li><li>带宽优化及网络连接的使用 <ul><li><code>HTTP1.1</code>支持断点续传，即返回码是 206（<code>Partial Content</code>）</li></ul></li><li>错误通知的管理 <ul><li><code>HTTP1.1</code>新增了 24 个错误状态响应码</li></ul></li><li>Host 头处理 <ul><li><code>HTTP1.0</code>中认为每台服务器都绑定一个唯一的 IP 地址</li></ul></li><li>长连接 <ul><li><code>HTTP1.1</code>中默认开启<code>Connection： keep-alive</code>，一定程度上弥补了<code>HTTP1.0</code>每次请求都要创建连接的缺点</li></ul></li></ul></li><li><p><strong>HTTP2.0 和 HTTP1.X 相比的新特性</strong></p><ul><li>新的二进制格式（<code>Binary Format</code>） <ul><li><code>HTTP1.x</code>的解析是基于文本</li><li><code>HTTP2.0</code>的协议解析采用二进制格式，实现方便且健壮</li></ul></li><li><code>header</code>压缩 <ul><li><code>HTTP1.x</code>的<code>header</code>带有大量信息，而且每次都要重复发送</li><li><code>HTTP2.0</code>使用<code>encoder</code>来减少需要传输的<code>header</code>大小， <ul><li>通讯双方各自<code>cache</code>一份<code>header fields</code>表，既避免了重复<code>header</code>的传输，又减小了需要传输的大小</li></ul></li></ul></li><li>服务端推送（<code>server push</code>）</li><li>多路复用（<code>MultiPlexing</code>） <ul><li><code>HTTP/1.0</code>：每次请求响应，建立一个 TCP 连接，用完关闭</li><li><code>HTTP/1.1</code>：长连接，若干个请求排队串行化单线程处理，后面的请求等待前面请求的返回才能获得执行机会，一旦有某请求超时等，后续请求只能被阻塞（线头阻塞）</li><li><code>HTTP/2.0</code>：多路复用，多个请求可同时在一个连接上并行执行，某个请求任务耗时严重，不会影响到其它连接的正常执行</li></ul></li></ul></li><li><p>总结<code>HTTP2</code>的优势：</p><ul><li>采用二进制进行通信，效率高</li><li>可以进行多路复用，多个请求只需要建立一个 TCP 请求通道</li><li>可以头部压缩，减少带宽资源</li></ul><blockquote><p>总得来说就是：效率高、请求时间短、请求性能好</p></blockquote></li></ul><h4 id="_6-http-和-https" tabindex="-1">（6）HTTP 和 HTTPS <a class="header-anchor" href="#_6-http-和-https" aria-label="Permalink to &quot;（6）HTTP 和 HTTPS&quot;">​</a></h4><ul><li><p><code>HTTP</code>：是一个客户端和服务端请求和响应的标准</p><ul><li>用于从 WWW 服务器，传输超文本，到本地浏览器的，超文本传输协议</li></ul></li><li><p><code>HTPS</code>：以安全未目标的 HTTP 通道，它在 HTTP 下加入了 SSL 层进行加密</p><ul><li>其作用是：建立一个信息安全通道，确保数据的传输，确保网站的真实性</li></ul></li><li><p>区别：</p><ul><li><code>HTTPS</code>协议比<code>HTTP</code>协议<strong>更安全</strong></li><li><code>HTTP</code>协议的默认端口为<code>80</code>，<code>HTTPS</code>协议的默认端口为<code>443</code></li><li><code>HTTPS</code>协议的握手阶段<strong>比较费时</strong></li><li><code>HTTPS</code>缓存不如<code>HTTP</code>高效，会增加数据开销、</li></ul></li></ul><h4 id="_7-http-请求跨域" tabindex="-1">（7）HTTP 请求跨域 <a class="header-anchor" href="#_7-http-请求跨域" aria-label="Permalink to &quot;（7）HTTP 请求跨域&quot;">​</a></h4><ul><li><p>原理：浏览器的<strong>同源政策</strong>造成的</p><ul><li>同源政策是指：浏览器对 JavaScript 的<strong>安全限制</strong>，只要<strong>协议、域名、端口</strong>中有任何一个不同，都会被当作是不同的域</li><li>跨域，即通过一些方式避开浏览器的安全限制</li></ul></li><li><p>解决方案：</p><ul><li><p><code>JSONP</code>：</p><ul><li><p>通过<code>&lt;script&gt;</code>标签的<code>src</code>属性来实现</p></li><li><p>但，只支持<code>GET</code>请求</p></li><li><p>但，兼容性好</p></li><li><p>代码示例</p><ul><li>前端定义一个解析函数(如: <code>jsonpCallback = function (res) {}</code>)</li><li>通过<code>params</code>的形式包装<code>script</code>标签的请求参数，并且声明执行函数(如<code>cb=jsonpCallback</code>)</li><li>后端获取到前端声明的执行函数(<code>jsonpCallback</code>)，并以带上参数且<strong>调用执行函数的方式传递给前端</strong></li><li>前端在<code>script</code>标签<strong>返回资源的时候就会去执行</strong><code>jsonpCallback</code>并通过回调函数的方式拿到数据了</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 1.定义一个全局函数func,--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 2.引入另一个源的服务器请求地址，（当前源的端口是3000） --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 当这个script标签加载完成，就会向另一个源发送请求，然后接受服务器的返回结果，调用函数--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:3001/test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul></li><li><p><code>CORS</code>：</p><ul><li><p>CORS，<code>cross-origin-resource-sharing</code>，跨域资源共享</p></li><li><p>需要服务器设置响应头的<code>Access-Control-Allow-Origin HTTP</code>字段</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Access</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Allow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:3000&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 表示允许这个网址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Access</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Allow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 表示允许所有网址</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul></li><li><p><code>Proxy</code>代理</p></li><li><p><code>Nginx</code>反向代理</p></li></ul></li></ul><h4 id="_8-四次挥手" tabindex="-1">（8）四次挥手 <a class="header-anchor" href="#_8-四次挥手" aria-label="Permalink to &quot;（8）四次挥手&quot;">​</a></h4><ul><li><p>通过 TCP 四次挥手断开连接</p><ul><li>第一次挥手确认客户端请求报文发送完毕</li><li>第二次挥手确认服务端请求报文接受完毕</li><li>第三次挥手确认服务端响应报文发送完毕</li><li>第四次挥手确认客户端响应报文接受完毕</li></ul></li><li><p>为什么需要四次挥手？</p><ul><li>TCP 是可以双向传输数据的，每个方向都需要一个请求和一个确认</li></ul></li><li><p>为什么要等待 2MSL？</p><ul><li>确保服务端收到了这个确认报文段</li></ul></li></ul><img src="`+r+'" width="50%"><h4 id="_9-渲染树" tabindex="-1">（9）渲染树 <a class="header-anchor" href="#_9-渲染树" aria-label="Permalink to &quot;（9）渲染树&quot;">​</a></h4><ul><li>渲染树由<strong>DOM 树</strong>和<strong>CSSOM 树</strong>组成，这个过程由<strong>GUI 渲染线程</strong>处理</li><li>在构建过程中 <ul><li>如果遇到节点是 <code>JS</code> ，遇到<code>&lt;script&gt;</code>标签，就会调用 <code>JS引擎</code> 对 JS 代码进行解释执行</li><li>此时由于 <code>JS引擎</code> 和 <code>GUI渲染线程</code> 互斥，<code>GUI渲染线程</code> 会被挂起，渲染过程停止</li><li>如果 <code>JS</code> 代码的运行中对<strong>DOM 树</strong>进行了修改，那么 DOM 构建要<strong>重新开始</strong></li></ul></li></ul><h4 id="_10-阻塞渲染问题" tabindex="-1">（10）阻塞渲染问题 <a class="header-anchor" href="#_10-阻塞渲染问题" aria-label="Permalink to &quot;（10）阻塞渲染问题&quot;">​</a></h4><ul><li>JS 为什么是<strong>单线程</strong>的？ <ul><li>为了保证，在同一时刻，<strong>只有一个对页面进行修改的操作</strong></li></ul></li><li>JS 会不会阻塞渲染？ <ul><li>JS<strong>会阻塞页面的渲染</strong>，因为浏览器设置渲染线程和 JS 引擎为<strong>互斥的关系</strong></li></ul></li><li>CSS 会不会阻塞页面渲染？ <ul><li>CSS<strong>会阻塞页面渲染</strong>，因为渲染树<code>Render Tree</code>依赖于 CSSOM</li><li>CSS<strong>不会阻塞 DOM 解析</strong>，因为 DOM 和 CSSOM 的构建是并行的</li></ul></li></ul><h4 id="_11-回流和重绘" tabindex="-1">（11）回流和重绘 <a class="header-anchor" href="#_11-回流和重绘" aria-label="Permalink to &quot;（11）回流和重绘&quot;">​</a></h4><ul><li><strong>重绘</strong>：页面中元素样式改变后，浏览器会将新样式赋予给元素并重新绘制它，这个过程称为重绘</li><li><strong>回流</strong>：页面中部分或全部元素的<strong>尺寸</strong>、<strong>结构</strong>、或<strong>某些属性</strong>发生改变时，浏览器会重新渲染这部分元素或全部文档，这个过程称为回流，或者<strong>重排</strong></li></ul><blockquote><p><strong>回流必将引起重绘，而重绘不一定会引起回流</strong></p></blockquote><h4 id="_12-页面渲染优化" tabindex="-1">（12）页面渲染优化 <a class="header-anchor" href="#_12-页面渲染优化" aria-label="Permalink to &quot;（12）页面渲染优化&quot;">​</a></h4><ul><li>CSS 放在文件头部，JavaScript 文件放在底部 <ul><li>CSS 执行会阻塞渲染，会阻止 JS 执行</li><li>JS 加载和执行会阻塞 HTML 解析，阻止 CSSOM 构建</li></ul></li><li>图片优化 <ul><li>压缩图片</li><li>图片懒加载</li><li>使用<strong>webp 格式</strong>的图片</li></ul></li><li>压缩文件 <ul><li>压缩 HTML、CSS、JS 文件</li><li>使用<code>gzip</code>压缩，再 HTTP 请求头中设置：在<code>Accept-Encoding</code>中添加<code>gzip</code>标识</li></ul></li><li>减少重绘、回流</li><li>使用服务端渲染</li></ul><h4 id="_13-http-层面的优化" tabindex="-1">（13）HTTP 层面的优化 <a class="header-anchor" href="#_13-http-层面的优化" aria-label="Permalink to &quot;（13）HTTP 层面的优化&quot;">​</a></h4><ul><li><p>利用缓存</p><ul><li>对于静态资源文件实现强缓存和协商缓存（扩展：文件有更新，如何保证及时刷新？）</li></ul></li><li><p>对于不经常更新的接口数据采用本地存储做数据缓存（扩展：cookie / localStorage / vuex|redux 区别？）</p></li><li><p>DNS 优化</p><ul><li>分服务器部署，增加 HTTP 并发性（导致 DNS 解析变慢）</li><li>DNS Prefetch</li></ul></li><li><p>TCP 的三次握手和四次挥手</p><ul><li><code>Connection:keep-alive</code></li></ul></li><li><p>数据传输</p><ul><li><p>减少数据传输的大小</p><ul><li><p>内容或者数据压缩（webpack 等）</p></li><li><p>服务器端一定要开启 GZIP 压缩（一般能压缩 60%左右）</p></li><li><p>大批量数据分批次请求（例如：下拉刷新或者分页，保证首次加载请求数据少）</p></li></ul></li><li><p>减少 HTTP 请求的次数</p><ul><li><p>资源文件合并处理</p></li><li><p>字体图标</p></li><li><p>雪碧图 CSS-Sprit</p></li><li><p>图片的 BASE64</p></li></ul></li></ul></li><li><p>CDN 服务器“地域分布式”</p></li><li><p>采用 HTTP2.0</p></li></ul><blockquote><p>网络优化是前端性能优化的中的重点内容，因为大部分的消耗都发生在网络层，尤其是第一次页面加载，如何减少等待时间很重要“减少白屏的效果和时间”</p><ul><li><p>LOADDING 人性化体验</p></li><li><p>骨架屏：客户端骨屏 - 服务器骨架屏</p></li><li><p>图片延迟加载</p></li></ul></blockquote><h4 id="_14-产品性能优化方案" tabindex="-1">（14）产品性能优化方案 <a class="header-anchor" href="#_14-产品性能优化方案" aria-label="Permalink to &quot;（14）产品性能优化方案&quot;">​</a></h4><ul><li><p>HTTP 网络层优化</p></li><li><p>代码编译层优化：<code>webpack</code></p></li><li><p>代码运行层优化：<code>html/css + javascript + vue + react</code></p></li><li><p>安全优化：<code>xss + csrf</code></p></li><li><p>数据埋点及性能监控</p></li><li><p><code>CRP</code>：<code>Critical Rendering Path</code>，关键渲染路径</p></li></ul>',65),d=[h];function c(k,g,u,E,b,T){return s(),l("div",null,d)}const m=i(p,[["render",c]]);export{y as __pageData,m as default};
