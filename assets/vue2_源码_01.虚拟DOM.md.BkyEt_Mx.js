import{_ as l,c as e,o as i,a3 as o}from"./chunks/framework.BkEKdGEG.js";const D=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"vue2/源码/01.虚拟DOM.md","filePath":"vue2/源码/01.虚拟DOM.md","lastUpdated":1716610678000}'),a={name:"vue2/源码/01.虚拟DOM.md"},c=o('<h2 id="虚拟-dom" tabindex="-1">虚拟 DOM <a class="header-anchor" href="#虚拟-dom" aria-label="Permalink to &quot;虚拟 DOM&quot;">​</a></h2><h3 id="_01-基本概念" tabindex="-1">01. 基本概念 <a class="header-anchor" href="#_01-基本概念" aria-label="Permalink to &quot;01. 基本概念&quot;">​</a></h3><ul><li><p>虚拟 DOM，即<code>Virtual DOM</code>，是用<code>JS</code>对象来对真实的 DOM 进行抽象，是一个普通的 JavaScript 对象，用来描述真实的 DOM，是对真实 DOM 的抽象</p></li><li><p>基本语法：</p></li></ul><h3 id="_02-实现原理" tabindex="-1">02. 实现原理 <a class="header-anchor" href="#_02-实现原理" aria-label="Permalink to &quot;02. 实现原理&quot;">​</a></h3><ul><li><p>虚拟 DOM 的实现原理主要包括以下 3 部分：</p><ul><li>用<code>JavaScript </code>对象模拟真实的 <code>DOM</code> 树，对真实 <code>DOM</code> 进行抽象</li><li><code>diff</code> 算法：用于比较两棵虚拟 DOM 树的差异</li><li><code>pach</code> 算法：用于将两个虚拟<code>DOM</code>对象的差异应用到真正的<code>DOM</code>树</li></ul></li><li><p>Virtual Dom 算法简述</p><ul><li><p>建立 V-DOM</p><ul><li>通过 JS 对象模拟 DOM 对象</li></ul></li><li><p>判断差异算法</p><ul><li>首先从上至下，从左往右遍历对象，也就是树的深度遍历，这一步中会给每个节点添加索引，便于最后渲染差异</li><li>一旦节点有子元素，就去判断子元素是否有不同</li></ul><blockquote><p>树的递归算法：</p><ol><li>新的节点的 <code>tagName</code> 或者 <code>key</code> 和旧的不同，这种情况代表需要替换旧的节点，并且也<u>不再需要遍历新旧节点的子元素</u>了，因为整个旧节点都被删掉了</li><li>新的节点的 <code>tagName</code> 和 <code>key</code>（可能都没有）和旧的节点相同，判断属性是否变更，然后开始遍历子树</li><li>没有新的节点，那么什么都不用做</li></ol><hr><p>判断属性的更改：</p><ol><li>遍历旧的属性列表，查看每个属性是否还存在于新的属性列表中</li><li>遍历新的属性列表，判断两个列表中都存在的属性的值是否有变化</li><li>在第二步中同时查看是否有属性不存在于旧的属性列列表中</li></ol><hr><p>判断列表差异算法：</p><ol><li>遍历旧的节点列表，查看每个节点是否还存在于新的节点列表中</li><li>遍历新的节点列表，判断是否有新的节点</li><li>在第二步中同时判断节点是否有移动</li></ol><hr><p>遍历子元素打标识：</p><ol><li>判断两个列表差异</li><li>给节点打上标记</li></ol></blockquote></li><li><p>渲染</p><ul><li>深度遍历树，将需要做变更操作的取出来</li><li>局部更新 DOM</li></ul></li></ul></li></ul>',5),t=[c];function d(r,p,_,u,s,n){return i(),e("div",null,t)}const O=l(a,[["render",d]]);export{D as __pageData,O as default};
