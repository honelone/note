import{_ as e,c as i,o as l,a1 as a}from"./chunks/framework.yskgK-vV.js";const t="/note/assets/DOM.nGhAj4Ur.png",o="/note/assets/CSSOM.BusNnYlq.png",r="/note/assets/RenderTree.B6se9_JD.png",s="/note/assets/Painting.CX2NVZjP.png",q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Web/渲染/渲染.md","filePath":"Web/渲染/渲染.md"}'),n={name:"Web/渲染/渲染.md"},c=a('<h2 id="浏览器底层渲染机制" tabindex="-1">浏览器底层渲染机制 <a class="header-anchor" href="#浏览器底层渲染机制" aria-label="Permalink to &quot;浏览器底层渲染机制&quot;">​</a></h2><h4 id="dom-树" tabindex="-1">DOM 树 <a class="header-anchor" href="#dom-树" aria-label="Permalink to &quot;DOM 树&quot;">​</a></h4><img src="'+t+'"><h4 id="cssom-树" tabindex="-1">CSSOM 树 <a class="header-anchor" href="#cssom-树" aria-label="Permalink to &quot;CSSOM 树&quot;">​</a></h4><img src="'+o+'"><h4 id="render-tree渲染树" tabindex="-1"><code>Render-Tree</code>渲染树 <a class="header-anchor" href="#render-tree渲染树" aria-label="Permalink to &quot;`Render-Tree`渲染树&quot;">​</a></h4><img src="'+r+'"><h4 id="总结步骤" tabindex="-1">总结步骤： <a class="header-anchor" href="#总结步骤" aria-label="Permalink to &quot;总结步骤：&quot;">​</a></h4><ul><li>处理 HTML 标记，构建 DOM 树</li><li>处理 CSS 标记，构建 CSSOM 树</li><li>将 DOM 树和 CSSOM 树融合成渲染树</li><li>根据生成的渲染树，计算它们在设备视口(viewport)内的确切位置和大小，这个计算的阶段就是回流 =&gt; 布局（Layout）或 重排（reflow）</li><li>根据渲染树以及回流得到的几何信息，得到节点的绝对像素 =&gt; 绘制（painting）</li></ul><h4 id="绘制" tabindex="-1">绘制 <a class="header-anchor" href="#绘制" aria-label="Permalink to &quot;绘制&quot;">​</a></h4><img src="'+s+'"><h4 id="优化" tabindex="-1">优化 <a class="header-anchor" href="#优化" aria-label="Permalink to &quot;优化&quot;">​</a></h4><ul><li>标签语义化</li><li>避免深层次嵌套</li><li>CSS 选择器渲染是从右到左</li><li>尽早尽快地把 CSS 下载到客户端（充分利用 HTTP 多请求并发机制） <ul><li><code>style</code></li><li><code>link</code></li><li><code>@import</code></li><li>放到顶部</li></ul></li><li>避免阻塞的 JS 加载 <ul><li><code>async</code></li><li><code>defer</code></li><li>放到底部</li></ul></li><li>减少 DOM 的回流和重绘 <ul><li>重绘：元素样式的改变</li><li>回流：元素大小、位置的改变</li><li>避免 DOM 回流 <ul><li>减少对 DOM 的操作</li><li>分离读写操作</li><li>样式集中改变</li><li>通过文档碎片、模板字符串，对元素批量修改</li><li>缓存布局信息</li><li>动画效果应用到脱离文档流的元素，减少对正常文档流的影响</li><li>开启 CSS3 硬件加速（GPU 加速）</li><li>避免<code>table</code>布局</li><li>避免使用 CSS 的<code>Javascript</code>表达式</li></ul></li></ul></li></ul>',13),d=[c];function h(_,u,m,S,p,b){return l(),i("div",null,d)}const P=e(n,[["render",h]]);export{q as __pageData,P as default};
