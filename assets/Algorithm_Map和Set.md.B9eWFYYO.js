import{_ as e,c as i,o as l,a1 as o}from"./chunks/framework.yskgK-vV.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Algorithm/Map和Set.md","filePath":"Algorithm/Map和Set.md"}'),d={name:"Algorithm/Map和Set.md"},a=o('<h5 id="_3-2-set" tabindex="-1">（3.2）Set <a class="header-anchor" href="#_3-2-set" aria-label="Permalink to &quot;（3.2）Set&quot;">​</a></h5><ul><li><p><code>Set</code>对象：用于存储任何类型的唯一值</p><ul><li><code>Set</code>内部相同元素只会出现一次，包括<code>NaN</code></li><li><code>Set</code>内<code>+0</code>和<code>-0</code>是不同的值</li></ul></li><li><p><code>Set</code>属性：</p><ul><li><code>size</code>：Set 大小</li></ul></li><li><p><code>Set</code>方法</p><ul><li><code>add()</code>：添加值</li><li><code>delete()</code>：删除值</li><li><code>clear()</code>：清除值</li><li><code>has()</code>：判断值</li><li><code>forEach()</code>：遍历值</li></ul></li><li><p><code>Set</code>创建</p><ul><li>传入一个<u>可迭代对象</u>，或者不传值</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mySet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([iterable]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><hr><h5 id="_3-3-map" tabindex="-1">（3.3）Map <a class="header-anchor" href="#_3-3-map" aria-label="Permalink to &quot;（3.3）Map&quot;">​</a></h5><ul><li><p><code>Map</code>对象：可以将任何值作为对象的键（<code>key</code>），而不仅限于<code>String</code>或者<code>Symbol</code></p><ul><li>在将值作为键之前，会对<strong>已有的键</strong>做一个<strong>全等于</strong>（<code>===</code>）判断</li><li>通过<code>size</code>可以获取<code>Map</code>的键值对个数</li></ul></li><li><p>属性：</p><ul><li><code>length</code>：为 0</li><li><code>size</code>：键值对数量</li><li><code>constructor</code>：返回其构造函数<code>Map</code></li></ul></li><li><p>方法</p><ul><li><code>clear()</code>：移除所有键值对</li><li><code>delete()</code>：删除指定元素，并返回 true，如果没有这个元素，则返回 false</li><li><code>get(key)</code>：返回指定键对应的值，如果不存在，则返回 undefined</li><li><code>has(key)</code>：判断是否含有指定键对应的值</li><li><code>set(key, value)</code>：设置元素</li></ul></li></ul>',5),c=[a];function t(s,n,p,r,h,u){return l(),i("div",null,c)}const m=e(d,[["render",t]]);export{k as __pageData,m as default};
