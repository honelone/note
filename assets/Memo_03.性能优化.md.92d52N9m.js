import{_ as s,c as i,o as a,a1 as n}from"./chunks/framework.yskgK-vV.js";const l="/note/assets/%E5%BC%BA%E7%BC%93%E5%AD%98.Cw5DRSq0.png",e="/note/assets/%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98.D_5POKPE.png",p="/note/assets/cache.DC7zbaM2.png",y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Memo/03.性能优化.md","filePath":"Memo/03.性能优化.md"}'),h={name:"Memo/03.性能优化.md"},t=n(`<h2 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h2><hr><p><a href="https://juejin.cn/post/6981673766178783262" target="_blank" rel="noreferrer">写给中高级前端关于性能优化的 9 大策略和 6</a></p><hr><ul><li>阅读笔记：</li></ul><blockquote><p>从过程趋势来看，<code>性能优化</code>可分为<strong>网络层面</strong>和<strong>渲染层面</strong>；从结果趋势来看，<code>性能优化</code>可分为<strong>时间层面</strong>和<strong>体积层面</strong>。</p></blockquote><h3 id="一、网络层面" tabindex="-1">一、网络层面 <a class="header-anchor" href="#一、网络层面" aria-label="Permalink to &quot;一、网络层面&quot;">​</a></h3><ul><li>网络层面的优化就是让项目资源的体积更小、加载更快</li><li>可以从以下四个方面入手 <ul><li>构建策略：基于构建工具（<code>Webpack/Rollup/Parcel/Esbuild/Vite/Gulp</code>）</li><li>图像策略：基于图像类型（<code>JPG/PNG/SVG/WebP/Base64</code>）</li><li>分发策略：基于内容分发网络（<code>CDN</code>）</li><li>缓存策略：基于浏览器缓存（<code>强缓存/协商缓存</code>）</li></ul></li><li>其中，构建策略和图像策略处于<strong>开发阶段</strong>，分发策略和缓存策略处于<strong>生产阶段</strong></li></ul><h4 id="_01-构建策略" tabindex="-1">01. 构建策略 <a class="header-anchor" href="#_01-构建策略" aria-label="Permalink to &quot;01. 构建策略&quot;">​</a></h4><ul><li>从构建工具来说，主要从<strong>时间层面</strong>和<strong>体积层面</strong>入手</li></ul><h5 id="_1-减少打包时间" tabindex="-1">（1）减少打包时间 <a class="header-anchor" href="#_1-减少打包时间" aria-label="Permalink to &quot;（1）减少打包时间&quot;">​</a></h5><h6 id="缩减范围" tabindex="-1"><strong>缩减范围</strong> <a class="header-anchor" href="#缩减范围" aria-label="Permalink to &quot;**缩减范围**&quot;">​</a></h6><ul><li>配置<code>include/exclude</code>缩小<code>Loader</code>对文件的<strong>搜索范围</strong></li><li>可以避免不必要的转译过程，减小检索文件的时间（毕竟依赖包太多了）</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        use: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        exclude:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">node_modules</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        include:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">src</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h6 id="缓存副本" tabindex="-1"><strong>缓存副本</strong> <a class="header-anchor" href="#缓存副本" aria-label="Permalink to &quot;**缓存副本**&quot;">​</a></h6><ul><li>配置<code>cache</code><strong>缓存</strong><code>Loader</code>对文件的编译副本</li><li>可以避免再次编译时需要重新编译所有文件（未修改的文件可以不用再编译）</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EslintPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;eslint-webpack-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        use: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            options: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              cacheDirectory: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EslintPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ cache: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h6 id="定向搜索" tabindex="-1"><strong>定向搜索</strong> <a class="header-anchor" href="#定向搜索" aria-label="Permalink to &quot;**定向搜索**&quot;">​</a></h6><ul><li>配置<code>resolve</code>提高文件的<strong>搜索速度</strong></li><li>可以定向指定必要文件的路径 <ul><li><code>alias</code>表示映射模块路径（路径别名），<code>extensions</code>表示可以省略的文件后缀名，<code>noParse</code>表示不需要作<code>ES5</code>处理的文件</li></ul></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h6 id="并行构建" tabindex="-1"><strong>并行构建</strong> <a class="header-anchor" href="#并行构建" aria-label="Permalink to &quot;**并行构建**&quot;">​</a></h6><ul><li>配置<code>Thread</code>将<code>Loader</code>单进程转换为多进程</li><li>可以让<code>webpack</code>同时处理多个任务</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Os </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;os&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        use: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;thread-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            options: { workes: Os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cpus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            options: { cacheDirectory: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h6 id="可视化分析" tabindex="-1"><strong>可视化分析</strong> <a class="header-anchor" href="#可视化分析" aria-label="Permalink to &quot;**可视化分析**&quot;">​</a></h6><ul><li>配置<code>BundleAnalyzer</code>分析打包文件结构</li><li>可以直观的找到体积过大的原因。分析打包文件的模块组成部分、模块体积占比、模块包含关系、模块依赖关系、压缩体积比等数据</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { BundleAnalyzerPlugin } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;webpack-bundle-analyzer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BundleAnalyzerPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="_2-减少打包体积" tabindex="-1">（2）减少打包体积 <a class="header-anchor" href="#_2-减少打包体积" aria-label="Permalink to &quot;（2）减少打包体积&quot;">​</a></h5><h6 id="分割代码" tabindex="-1"><strong>分割代码</strong> <a class="header-anchor" href="#分割代码" aria-label="Permalink to &quot;**分割代码**&quot;">​</a></h6><ul><li><strong>分割</strong>各个模块的代码，提取相同部分代码</li><li>可以减少重复代码的出现频率，减小体积 <ul><li>使用<code>splitChunks</code>实现代码分割</li></ul></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimization: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    runtimeChunk: { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;manifest&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 抽离 webpackRuntime 函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    splitChunke: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      cacherGroups: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        common: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          minChunks: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;common&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          priority: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          reuseExistingChunk: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 重用已存在代码块</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          test: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AbsPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        vendor: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          chunks: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;initial&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 代码分割类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vendor&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 代码块名称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          priority: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 优先级</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">node_modules</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 校验文件正则</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      chunks: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;all&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 代码分割类型， all-全部模块， async-异步模块， initial-入口模块</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h6 id="tree-shaking" tabindex="-1"><strong>Tree-Shaking</strong> <a class="header-anchor" href="#tree-shaking" aria-label="Permalink to &quot;**Tree-Shaking**&quot;">​</a></h6><ul><li><strong>删除</strong>项目中未被引用代码</li><li>可以移除重复的代码和未使用的代码 <ul><li><code>tree-shaking</code>只对<code>ESM</code>规范生效，对其它模块规范无效</li><li>只有<code>import/export</code>才能提供静态的导入/导出功能</li></ul></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">## 开启生产环境即可开启 tree</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shaking</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h6 id="动态垫片" tabindex="-1"><strong>动态垫片</strong> <a class="header-anchor" href="#动态垫片" aria-label="Permalink to &quot;**动态垫片**&quot;">​</a></h6><ul><li><p>通过垫片服务根据 UA 返回当前浏览器<strong>代码垫片</strong></p><blockquote><p>动态垫片就是：根据浏览器的<code>UserAgent</code>，去<code>browserlist</code>中查找出当前浏览器，缺乏对哪些特性的支持，从而返回这些特性的<code>Polyfill</code></p><ul><li>即是，浏览器支持的，我们不需要再去打包了，浏览器会提供；浏览器不支持的，我们才打包进去</li></ul></blockquote></li><li><p>可以避免将繁重的代码垫片打包进去</p><ul><li>每次构建都配置<code>@babel/preset-env</code>和<code>core-js</code>，根据需求将<code>Polyfill</code>打包进来</li><li><code>@babel/preset-env</code>提供的<code>useBuiltIns</code>可按需导入<code>Polyfill</code><ul><li><code>false</code>：表示无视<code>target.browsers</code>，将所有<code>Polyfill</code>加载进来</li><li><code>entry</code>：表示根据<code>target.browsers</code>，将部分<code>Polyfill</code>加载进来 <ul><li>如果仅需要引入浏览器不支持的，则要在入口配置<code>import &#39;core-js/stable&#39;</code></li></ul></li><li><code>usage</code>：根据<code>target.browesers</code>和检测代码里 ES6 的使用情况将部分<code>Polyfill</code>加载进来</li></ul></li><li>以上为自定义配置，十分繁琐，所以推荐使用动态垫片的方式来进行以上处理</li></ul></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HtmlTagsPlugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;html-webpack-tags-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HtmlTagsPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      append: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在生产资源后插入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      publicPath: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用公共路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      tags: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://polyfill.alicdn.com/polyfill.min.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 资源路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h6 id="按需加载" tabindex="-1"><strong>按需加载</strong> <a class="header-anchor" href="#按需加载" aria-label="Permalink to &quot;**按需加载**&quot;">​</a></h6><ul><li>将路由页面/触发性功能<strong>单独打包为一个文件</strong>，使用时才加载</li><li>可以减轻首屏渲染的负担，项目功能越多、打包体积就越大、首屏渲染就越慢，实际上，首屏只需要对应的 JS 代码即可，无需其它 JS 代码</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 魔法注释，分割模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Home</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* webpackChunkName: &#39;home&#39; */</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./home&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Login</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* webpackChunkName: &#39;login&#39; */</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./login&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 同时，需要再 package.json 中配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;babel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;plugins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;@babel/plugin-syntax-dynamic-import&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h6 id="作用提升" tabindex="-1"><strong>作用提升</strong> <a class="header-anchor" href="#作用提升" aria-label="Permalink to &quot;**作用提升**&quot;">​</a></h6><ul><li>分析模块间依赖关系，把打包好的模块合并到一个函数中</li><li>可以减少函数声明和内存花销 <ul><li>如果不开启作用提升，构建后的代码会存在大量函数闭包，且由于模块之间的依赖，会导致大量函数闭包产生、再运行代码时，创建的函数作用域也会变多</li><li>开启作用提升后，构建后的代码会按照引入顺序放到一个函数作用域里面，并适量的重命名以防止变量名冲突，以减少函数声明和内存花销</li></ul></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">## 直接开启生产环境即可让作用提升生效</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;production&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">## 或者显示设置 concatenateModules</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    optimization: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        concatenateModules: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h6 id="压缩资源" tabindex="-1"><strong>压缩资源</strong> <a class="header-anchor" href="#压缩资源" aria-label="Permalink to &quot;**压缩资源**&quot;">​</a></h6><ul><li>压缩<code>HTML/CSS/JS</code>代码，压缩字体/图像/音频/视频</li><li>可以减少代码体积</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">## Html </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 html</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">webpack</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugin 开启</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HtmlPlugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;html-webpack-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        HtmlPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            minify: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                collapseWhitespace: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                removeComments: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">## </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CSS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 optimizeCSs 和 uUglifyjs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OptimizeCssAssetsPlugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;optimize-css-assets-webpack-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TerserPlugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;terser-webpack-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UglifyjsPlugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;uglifyjs-webpack-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compressOpts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cache: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 缓存文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    parallel: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 并行处理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}Options\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        beautify: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compress: { drop_console: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 压缩配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> compressCss</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OptimizeCssAssetsPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cssProcessorOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        autoprefixer: { remove: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置autoprefixer保留过时样式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        safe: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 避免cssnano重新计算z-index</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> compressJs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> USE_ES6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TerserPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compressOpts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;terser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UglifyjsPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compressOpts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uglify&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    optimization: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        minimizer: [compressCss, compressJs] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 代码压缩</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">## 字体、音频、视频 需要自行使用压缩工具对其进行压缩</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><h4 id="_02-图像策略" tabindex="-1">02. 图像策略 <a class="header-anchor" href="#_02-图像策略" aria-label="Permalink to &quot;02. 图像策略&quot;">​</a></h4><ul><li>使用工具进行图像压缩</li></ul><hr><h4 id="_03-分发策略" tabindex="-1">03. 分发策略 <a class="header-anchor" href="#_03-分发策略" aria-label="Permalink to &quot;03. 分发策略&quot;">​</a></h4><ul><li><p>分发策略即基于内容分发网络做处理</p><ul><li>内容分发网络简称 CDN，主要特征是缓存和回溯</li><li>缓存：即把资源复制到 CDN 服务器里</li><li>回源：即当资源过期/不存在，就向上层服务器请求并复制到 CDN 服务器里</li></ul></li><li><p><strong>所有静态资源走 CDN</strong>：在开发阶段就确认哪些文件属于静态资源</p></li><li><p><strong>把静态资源与主页面置于不同域名下</strong>：避免请求时带上<code>Cookie</code></p></li><li><p>使用 CDN 可降低网络阻塞，提高用户访问响应速度和命中率</p></li></ul><hr><h4 id="_04-缓存策略" tabindex="-1">04. 缓存策略 <a class="header-anchor" href="#_04-缓存策略" aria-label="Permalink to &quot;04. 缓存策略&quot;">​</a></h4><ul><li><p>缓存策略主要通过浏览器缓存做相关处理</p></li><li><p>可通过以下五点来进行</p><ul><li><p><strong>考虑拒绝一切缓存策略</strong>：<code>Cache-Control:no-store</code></p></li><li><p><strong>考虑资源是否每次向服务器请求</strong>：<code>Cache-Control:no-cache</code></p></li><li><p><strong>考虑资源是否被代理服务器缓存</strong>：<code>Cache-Control:public/private</code></p></li><li><p><strong>考虑资源过期时间</strong>：<code>Expires:t/Cache-Control:max-age=t,s-maxage=t</code></p></li><li><p><strong>考虑协商缓存</strong>：<code>Last-Modified/Etag</code></p></li></ul></li><li><p>缓存策略通过设置<code>HTTP</code>报文实现，在形式上分为<strong>强缓存（强制缓存）和协商缓存（对比缓存）</strong></p></li></ul><img src="`+l+'" style="zoom:50%;"><img src="'+e+'" style="zoom:50%;"><img src="'+p+'" alt="协商缓存.png" style="zoom:50%;"><blockquote><p>整个<code>缓存策略</code>机制很明了，<code>先走强缓存，若命中失败才走协商缓存</code></p><ul><li>若命中<code>强缓存</code>，直接使用<code>强缓存</code>；</li><li>若未命中<code>强缓存</code>，发送请求到服务器检查是否命中<code>协商缓存</code>；</li><li>若命中<code>协商缓存</code>，服务器返回 304 通知浏览器使用<code>本地缓存</code>，否则返回<code>最新资源</code>。</li></ul></blockquote><ul><li>对于频繁变动资源 <ul><li>设置<code>Cache-Control: no-cache</code>，使用浏览器每次都发送请求到服务器，配合<code>Last-Modified/ETag</code>验证资源是否有效</li></ul></li><li>对于不常变化资源 <ul><li>设置<code>Cache-Control: max-age=31536000</code>，对文件名哈希处理，当代码修改后生成新的文件名，当 HTML 文件引入文件名发生改变才会下载最新文件</li></ul></li></ul><hr><h3 id="二、渲染层面" tabindex="-1">二、渲染层面 <a class="header-anchor" href="#二、渲染层面" aria-label="Permalink to &quot;二、渲染层面&quot;">​</a></h3><ul><li>渲染层面的优化就是让代码解析更好执行更快 <ul><li>更多是表现在编码细节上，而并非实体代码</li><li>需要遵循某些编码规则，才能将渲染层面的性能优化发挥到最大作用</li></ul></li><li>可以从以下五个方面入手 <ul><li>CSS 策略：基于 CSS 规则</li><li>DOM 策略：基于 DOM 操作</li><li>阻塞策略：基于脚本加载</li><li>回流重绘策略：基于回流重绘</li><li>异步更新策略：基于异步更新</li></ul></li></ul><h4 id="_01-css-策略" tabindex="-1">01. CSS 策略 <a class="header-anchor" href="#_01-css-策略" aria-label="Permalink to &quot;01. CSS 策略&quot;">​</a></h4><ul><li>避免出现超过三层的<strong>嵌套规则</strong></li><li>避免为<strong>ID 选择器</strong>添加多余选择器</li><li><strong>避免使用标签选择器</strong>代替类选择器</li><li><strong>避免使用通配符选择器</strong>，只对需要的节点声明规则</li><li>避免重复匹配重复定义，关注<strong>可继承属性</strong></li></ul><hr><h4 id="_02-dom-策略" tabindex="-1">02. DOM 策略 <a class="header-anchor" href="#_02-dom-策略" aria-label="Permalink to &quot;02. DOM 策略&quot;">​</a></h4><ul><li>缓存<strong>DOM 计算属性</strong></li><li>避免过多<strong>DOM 操作</strong></li><li>使用<code>DOMFragment</code>缓存<strong>批量化 DOM 操作</strong></li></ul><hr><h4 id="_03-阻塞策略" tabindex="-1">03. 阻塞策略 <a class="header-anchor" href="#_03-阻塞策略" aria-label="Permalink to &quot;03. 阻塞策略&quot;">​</a></h4><ul><li>脚本与<strong>DOM /其它脚本</strong>的依赖关系很强：对<code>&lt;script&gt;</code>设置<code>defer</code></li><li>脚本与<strong>DOM/其它脚本</strong>的依赖关系不强：对<code>&lt;script&gt;</code>设置<code>async</code></li></ul><hr><h4 id="_04-回流重绘策略" tabindex="-1">04. 回流重绘策略 <a class="header-anchor" href="#_04-回流重绘策略" aria-label="Permalink to &quot;04. 回流重绘策略&quot;">​</a></h4><ul><li>缓存<strong>DOM 计算属性</strong></li><li>使用类合并样式，避免逐条改变样式</li><li>使用<code>display</code>控制<code>DOM</code>显隐，将<strong>DOM 离线化</strong></li></ul><hr><h4 id="_05-异步更新策略" tabindex="-1">05. 异步更新策略 <a class="header-anchor" href="#_05-异步更新策略" aria-label="Permalink to &quot;05. 异步更新策略&quot;">​</a></h4><ul><li>在异步任务重<strong>修改 DOM</strong>时，把其包装成<strong>微任务</strong></li></ul><hr><h3 id="三、其它层面" tabindex="-1">三、其它层面 <a class="header-anchor" href="#三、其它层面" aria-label="Permalink to &quot;三、其它层面&quot;">​</a></h3><h4 id="_01-加载优化" tabindex="-1">01. 加载优化 <a class="header-anchor" href="#_01-加载优化" aria-label="Permalink to &quot;01. 加载优化&quot;">​</a></h4><ul><li>优化网络 <ul><li>缓存资源</li><li>避免重定向</li><li>无阻塞加载 <ul><li>样式在<code>&lt;head&gt;</code>尾部使用<code>&lt;link&gt;</code>加载</li><li>脚本在<code>&lt;body&gt;</code>尾部使用异步加载</li></ul></li><li>减少<code>http</code>请求</li><li>减少携带<code>Cookie</code></li><li>异步加载第三方资源</li></ul></li><li>压缩文件 <ul><li>压缩代码</li><li>压缩图像体积</li><li>合并图标成精灵图</li><li>选择正确图形格式</li><li>使用 CSS 代替修饰类图像</li><li>使用 Base64 代替小质量图像</li><li>使用 CDN 加载静态资源且可通过参数调整</li><li>尽量将字体转换为<code>woff2</code>字体</li></ul></li><li>首屏体验 <ul><li>预解析——<code>pre-parse</code><ul><li>预先解析 DNS 获取域名对应 IP</li></ul></li><li>预加载——<code>pre-load</code><ul><li>延后加载无需立即用到的资源，但要确保使用时已加载</li></ul></li><li>预渲染——<code>pre-render</code><ul><li>延后渲染无需立即打开的页面，但要确保使用时已渲染</li></ul></li><li>懒加载——<code>lazy-load</code><ul><li>延后加载无需立即渲染的资源，进入区域时才加载</li></ul></li><li>懒执行——<code>lazy-run</code><ul><li>延后执行无需立即处理的逻辑，等到使用时才执行</li></ul></li></ul></li></ul><h4 id="_02-执行优化" tabindex="-1">02. 执行优化 <a class="header-anchor" href="#_02-执行优化" aria-label="Permalink to &quot;02. 执行优化&quot;">​</a></h4><ul><li>避免重置图像尺寸</li><li>避免资源标签<code>src</code>为空</li><li>避免图像转换<code>DataURL</code></li></ul><h4 id="_03-渲染优化" tabindex="-1">03. 渲染优化 <a class="header-anchor" href="#_03-渲染优化" aria-label="Permalink to &quot;03. 渲染优化&quot;">​</a></h4><ul><li>设置<code>viewport</code></li><li>减少 DOM 节点</li><li>优化动画 <ul><li>优先使用 CSS 动画</li><li>合理开启 GPU 加速</li><li>合理使用 Canvas 动画</li><li>合理使用<code>requestAnimationFrame</code>代替<code>setTimeout</code></li></ul></li><li>优化高频事件 <ul><li>节流<code>Throttle</code><ul><li>指定时间内执行的操作被连续出发只执行第一次</li></ul></li><li>防抖<code>Debounce</code><ul><li>指定事件内执行的操作被连续触发只执行最后一次</li></ul></li><li>增加响应变化的时间间隔</li><li>使用<code>requestAnimationFrame</code>监听帧变化</li></ul></li></ul><h4 id="_04-样式优化" tabindex="-1">04. 样式优化 <a class="header-anchor" href="#_04-样式优化" aria-label="Permalink to &quot;04. 样式优化&quot;">​</a></h4><ul><li>标准化各种浏览器前缀</li><li>值为 0 时不添加任何单位</li><li>移除 CSS 空规则</li><li>避免 CSS 表达式</li><li>避免 HTML 中出现样式</li><li>避免选择器看起来像正则</li><li>正确使用 display</li><li>不滥用 float</li><li>不滥用 Web 字体</li><li>不声明过多的 font-size</li></ul><h4 id="_05-脚本优化" tabindex="-1">05. 脚本优化 <a class="header-anchor" href="#_05-脚本优化" aria-label="Permalink to &quot;05. 脚本优化&quot;">​</a></h4><ul><li>缓存数组长度</li><li>缓存 DOM 计算数学</li><li>避免过多 DOM 操作</li><li>尽量使用 ID 选择器</li><li>尽量使用事件代理</li><li>优化 Touch 事件</li></ul><h4 id="_06-v8-引擎优化" tabindex="-1">06. V8 引擎优化 <a class="header-anchor" href="#_06-v8-引擎优化" aria-label="Permalink to &quot;06. V8 引擎优化&quot;">​</a></h4><ul><li>通过<code>Chrome DevTools LightHouse</code>获取页面性能指标报告</li><li>通过<code>Chrome DevTools Performance</code>获取页面性能瓶颈报告</li><li>通过<code>Performance API</code>获取页面各个阶段精确时间</li><li>压缩代码体积/减少嵌套函数降低编译时间</li><li>保证函数入参类型一致，让 V8 自动优化代码</li></ul><h3 id="四、基于-http-的前端性能优化" tabindex="-1">四、基于 HTTP 的前端性能优化 <a class="header-anchor" href="#四、基于-http-的前端性能优化" aria-label="Permalink to &quot;四、基于 HTTP 的前端性能优化&quot;">​</a></h3><ul><li><p><strong>产品性能优化方案</strong></p><ul><li>HTTP 网络层优化</li><li>代码编译层优化：<code>webpack</code></li><li>代码运行层优化：<code>html/css + javascript + vue + react</code></li><li>安全优化：<code>xss + csrf</code></li><li>数据埋点及性能监控</li></ul></li><li><p><code>CRP</code>：<code>Critical Rendering Path</code>，关键渲染路径</p></li></ul>',94),k=[t];function r(d,E,c,o,g,u){return a(),i("div",null,k)}const m=s(h,[["render",r]]);export{y as __pageData,m as default};
