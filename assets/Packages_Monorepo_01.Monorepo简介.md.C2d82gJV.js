import{_ as o,c as e,o as l,a1 as i}from"./chunks/framework.yskgK-vV.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Packages/Monorepo/01.Monorepo简介.md","filePath":"Packages/Monorepo/01.Monorepo简介.md"}'),a={name:"Packages/Monorepo/01.Monorepo简介.md"},c=i('<h2 id="monorepo" tabindex="-1">Monorepo <a class="header-anchor" href="#monorepo" aria-label="Permalink to &quot;Monorepo&quot;">​</a></h2><h3 id="_01-基本信息" tabindex="-1">01. 基本信息 <a class="header-anchor" href="#_01-基本信息" aria-label="Permalink to &quot;01. 基本信息&quot;">​</a></h3><h4 id="_1-简介" tabindex="-1">（1）简介 <a class="header-anchor" href="#_1-简介" aria-label="Permalink to &quot;（1）简介&quot;">​</a></h4><ul><li><code>Monorepo</code>，一种项目代码管理方式，可以在一个仓库中管理多个项目 <ul><li>有助于简化<strong>代码共享</strong>、<strong>版本控制</strong>、<strong>构建和部署</strong>，的复杂性</li><li>提供更好的可重用性和协作性</li></ul></li></ul><h4 id="_2-背景" tabindex="-1">（2）背景 <a class="header-anchor" href="#_2-背景" aria-label="Permalink to &quot;（2）背景&quot;">​</a></h4><ul><li><p><code>Monolith</code>：单一代码仓库</p><ul><li>一个<code>Git</code>仓库维护项目代码，所有的功能和模块都集中在一起</li><li>从前端界面到后端逻辑，甚至包括数据库模式和配置文件等</li><li>项目代码会随着业务复杂度的提升而变得臃肿</li></ul></li><li><p><code>Multirepo</code>：多仓库多模块</p><ul><li>将不同的功能模块、业务模块组件、服务等拆分，分别放置在多个<code>Git</code>仓库中管理</li><li>每个模块可以独立进行编码开发、版本控制、构建部署</li><li>更容易实现并行开发和团队协作</li><li>但是维护成本高，管理繁琐</li></ul></li><li><p><code>Monorepo</code>：单仓库多模块</p><ul><li>多模块仓库会导致管理难度提升，跨仓库的代码难共享，模块依赖管理复杂</li><li>将多个项目集中到一个仓库下，共享工程配置，共享模块代码</li></ul></li></ul><h4 id="_3-优劣" tabindex="-1">（3）优劣 <a class="header-anchor" href="#_3-优劣" aria-label="Permalink to &quot;（3）优劣&quot;">​</a></h4><ul><li><p>代码可见性</p><ul><li><code>Multirepo</code>：多个仓库代码隔离，只需要关注当前开发的仓库即可；但依赖包出现问题，需要到对应仓库模块下去查看问题</li><li><code>Monorepo</code>：一个仓库多个项目，可以容易看到代码的变化趋势；但容易出现其他人改动代码的情况</li></ul></li><li><p>依赖管理</p><ul><li><code>Multirepo</code>：每个仓库使用自己的依赖，导致依赖重复安装</li><li><code>Monorepo</code>：相同版本的依赖提升到顶层安装一次，不同的依赖在项目目录安装</li></ul></li><li><p>代码权限</p><ul><li><code>Multirepo</code>：每个仓库都有孫的权限，权限划分明确</li><li><code>Monorepo</code>：多个项目代码都在一个仓库，权限管控弱</li></ul></li><li><p>开发迭代</p><ul><li><code>Multirepo</code>：仓库体积小，模块划分清晰，维护性强；但需要来回切换仓库</li><li><code>Monorepo</code>：代码复用性高，方便进行代码重构；但仓库体积较大</li></ul></li><li><p>工程配置</p><ul><li><code>Multirepo</code>：各个仓库都是单独的配置，可能导致打包构建差异</li><li><code>Monorepo</code>：工程配置统一</li></ul></li><li><p>构建部署</p><ul><li><code>Multirepo</code>：多个项目之间存在依赖，可能需要手动修改版本，比较繁琐</li><li><code>Monorepo</code>：可以配置依赖项目的构建优先级，一次命令完成所有的部署</li></ul></li></ul><blockquote><p>最终还是需要看公司项目的情况而定</p><p>一般用得多的都是<code>Multirepo</code></p><p>但是使用<code>Monorepo</code>会更好点</p></blockquote><ul><li>总结 <ul><li>统一的工程配置，便捷的依赖维护，快速修改响应</li></ul></li></ul><h3 id="_02-踩坑总结" tabindex="-1">02. 踩坑总结 <a class="header-anchor" href="#_02-踩坑总结" aria-label="Permalink to &quot;02. 踩坑总结&quot;">​</a></h3><h4 id="_1-幽灵依赖" tabindex="-1">（1）幽灵依赖 <a class="header-anchor" href="#_1-幽灵依赖" aria-label="Permalink to &quot;（1）幽灵依赖&quot;">​</a></h4><ul><li>在使用<code>npm</code>、<code>yarn</code>安装依赖时，存在依赖提升</li><li>某个项目使用的依赖，并没有在其<code>package.json</code>中声明，但是在其它项目中有使用</li><li>但随着项目迭代升级，另一个项目不需要了，这个时候没有声明依赖的项目就会报错</li><li>这个现象就是<strong>幽灵依赖</strong></li></ul><blockquote><p>可以通<code>pnpm</code>安装依赖的方式来解决这个问题</p></blockquote><h4 id="_2-依赖安装久" tabindex="-1">（2）依赖安装久 <a class="header-anchor" href="#_2-依赖安装久" aria-label="Permalink to &quot;（2）依赖安装久&quot;">​</a></h4><ul><li>因为每个项目都有自己的<code>package.json</code>依赖列表</li></ul><blockquote><ul><li>相同版本的依赖提升到<code>Monorepo</code>根目录下，减少冗余来来安装</li><li>使用<code>pnpm</code>安装依赖</li></ul></blockquote><h4 id="_3-构建打包久" tabindex="-1">（3）构建打包久 <a class="header-anchor" href="#_3-构建打包久" aria-label="Permalink to &quot;（3）构建打包久&quot;">​</a></h4><ul><li>多个项目构建任务存在依赖时，往往是串行构建或者全量构建，导致构建时间长</li></ul><blockquote><ul><li>使用增量构建，而非全量构建</li><li>将串行构建优化成并行构建</li></ul></blockquote><h3 id="_03-monorepo选型" tabindex="-1">03. <code>Monorepo</code>选型 <a class="header-anchor" href="#_03-monorepo选型" aria-label="Permalink to &quot;03. `Monorepo`选型&quot;">​</a></h3><h4 id="_1-构建型" tabindex="-1">（1）构建型 <a class="header-anchor" href="#_1-构建型" aria-label="Permalink to &quot;（1）构建型&quot;">​</a></h4><ul><li><code>Turborepo</code></li><li><code>Rush</code></li><li><code>Nx</code></li></ul><h4 id="_2-轻量型" tabindex="-1">（2）轻量型 <a class="header-anchor" href="#_2-轻量型" aria-label="Permalink to &quot;（2）轻量型&quot;">​</a></h4><ul><li><code>Lerna</code></li><li><code>yarn/npm + workspace</code></li><li><code>pnpm + workspace</code></li></ul><blockquote><p>TODO： 后续这里延伸补充</p></blockquote>',26),r=[c];function d(t,n,u,p,h,s){return l(),e("div",null,r)}const q=o(a,[["render",d]]);export{b as __pageData,q as default};
