import{_ as s,c as i,o as a,a1 as n}from"./chunks/framework.yskgK-vV.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"JS/JavaScript/ECMAScript基础/01.基础.md","filePath":"JS/JavaScript/ECMAScript基础/01.基础.md"}'),l={name:"JS/JavaScript/ECMAScript基础/01.基础.md"},e=n(`<h2 id="一、语言基础" tabindex="-1">一、语言基础 <a class="header-anchor" href="#一、语言基础" aria-label="Permalink to &quot;一、语言基础&quot;">​</a></h2><h3 id="_01-javascript-中的变量" tabindex="-1">01. JavaScript 中的变量 <a class="header-anchor" href="#_01-javascript-中的变量" aria-label="Permalink to &quot;01. JavaScript 中的变量&quot;">​</a></h3><blockquote><p>变量：是一个用于<strong>存放数据</strong>的<strong>容器</strong>，<strong>本质</strong>是程序在<strong>内存中</strong>申请的一块用来<strong>存放数据</strong>的<strong>空间</strong></p></blockquote><h4 id="_1-声明变量的几种方式" tabindex="-1">（1）声明变量的几种方式 <a class="header-anchor" href="#_1-声明变量的几种方式" aria-label="Permalink to &quot;（1）声明变量的几种方式&quot;">​</a></h4><ul><li><p>声明变量后，计算机会自动为变量分配一个<strong>内存空间</strong></p></li><li><p>使用<code>var</code>关键字：<code>var name;</code></p></li><li><p>使用<code>let</code>关键字：<code>let name;</code></p></li><li><p>使用<code>const</code>关键字：<code>const name;</code></p></li><li><p>同时声明多个变量，使用逗号<code>,</code>分隔：<code>let name,age;</code></p></li></ul><h4 id="_2-变量命名规范" tabindex="-1">（2）变量命名规范 <a class="header-anchor" href="#_2-变量命名规范" aria-label="Permalink to &quot;（2）变量命名规范&quot;">​</a></h4><ul><li>可以由字母、数字、下划线<code>_</code>、美元符号<code>$</code>组成 <ul><li>但<strong>不能以数字开头</strong></li></ul></li><li>严格区分<strong>大小写</strong></li><li>不能是<code>JavaScript</code>中的关键字、保留字</li><li>遵循<strong>驼峰命名</strong><ul><li>使用有意义的英文描述变量，多个单词之间，第一个单词首字母小写，其余单词首字母大写</li></ul></li></ul><h4 id="_3-特殊情况" tabindex="-1">（3）特殊情况 <a class="header-anchor" href="#_3-特殊情况" aria-label="Permalink to &quot;（3）特殊情况&quot;">​</a></h4><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  不声明、不赋值，结果：报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age1);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只声明、不赋值，结果：undefined</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age2);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不声明、只赋值，结果：赋的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age3);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_02-js的注释方法" tabindex="-1">02. <code>JS</code>的注释方法 <a class="header-anchor" href="#_02-js的注释方法" aria-label="Permalink to &quot;02. \`JS\`的注释方法&quot;">​</a></h3><ul><li><p>单行注释：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这是单行注释，中间有空格分开</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>多行注释：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	这是</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	多行注释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><hr><h3 id="_03-js的输入输出" tabindex="-1">03. <code>JS</code>的输入输出 <a class="header-anchor" href="#_03-js的输入输出" aria-label="Permalink to &quot;03. \`JS\`的输入输出&quot;">​</a></h3><ul><li><p>浏览器中的输入输出</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 由浏览器弹出一个输入框，用户可以输入</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请输入：&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 由浏览器弹出一个警示框</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;警告！！！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在浏览器的控制台打印输出内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><hr><h3 id="_04-预解析" tabindex="-1">04. 预解析 <a class="header-anchor" href="#_04-预解析" aria-label="Permalink to &quot;04. 预解析&quot;">​</a></h3><ul><li><p><strong><code>JS</code>引擎</strong>在执行代码前，会进行一个预解析过程</p><ul><li>会把<code>js</code> 里面所有的 <code>var</code>声明的变量，和 <code>function</code> 声明的函数提升到当前作用域的<strong>最前面</strong></li></ul></li><li><p>预解析的分类</p><ul><li><p><strong>变量预解析</strong>（变量提升）</p><ul><li>把所有的<strong>变量声明</strong>提升到当前作用域的最前面，<strong>但不提升赋值操作</strong></li></ul></li><li><p><strong>函数预解析</strong>（函数提升）</p><ul><li>把所有的<strong>函数声明</strong>提升到当前作用域的最前面，<strong>但不调用函数</strong></li></ul><blockquote><p>如果函数和变量同名，以函数优先</p></blockquote></li></ul></li><li><p>示例</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//	undefined</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//等效于下面代码</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//变量声明提升</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//	undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等效于下面代码</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 函数声明提升</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li></ul><h3 id="_05-严格模式-strict-mode" tabindex="-1">05. 严格模式（strict mode） <a class="header-anchor" href="#_05-严格模式-strict-mode" aria-label="Permalink to &quot;05. 严格模式（strict mode）&quot;">​</a></h3><h4 id="_1-基本概念" tabindex="-1">（1）基本概念 <a class="header-anchor" href="#_1-基本概念" aria-label="Permalink to &quot;（1）基本概念&quot;">​</a></h4><ul><li><p>消除了<code>Javascript</code>语法的一些不合理、不严谨之处，减少了一些怪异行为</p></li><li><p>消除代码运行的一些不安全之处，保证代码运行的安全</p></li><li><p>提高编译器效率，增加运行速度</p></li><li><p><strong>禁用了在</strong><code>ECMAScript</code>的<strong>末来版本</strong>中可能会定义的一些语法，为末来新版本的 <code>Javascript</code>做好铺垫。</p><ul><li>比如一些保留字，如：<code>class</code>、<code>enum</code>、<code>export</code>、<code>extends</code>、 <code>import</code>、<code>super</code>不能做变量名</li></ul></li></ul><h4 id="_2-使用方法" tabindex="-1">（2）使用方法 <a class="header-anchor" href="#_2-使用方法" aria-label="Permalink to &quot;（2）使用方法&quot;">​</a></h4><ul><li><p>为脚本开启严格模式</p><ul><li>在所有语句之前放置特定语句： <code>&quot;use strict&quot;;</code></li></ul></li><li><p>为函数开启严格模式</p><ul><li>在函数内部之前放置语句： <code>&quot;use strict&quot;;</code></li></ul></li></ul><h4 id="_3-严格模式下的变化" tabindex="-1">（3）严格模式下的变化 <a class="header-anchor" href="#_3-严格模式下的变化" aria-label="Permalink to &quot;（3）严格模式下的变化&quot;">​</a></h4><ul><li><p>变量</p><ul><li>变量必须<strong>先声明，再使用</strong></li><li><strong>不能随意删除</strong>已经声明的变量</li></ul></li><li><p><code>this</code>指向</p><ul><li><p>有改变的：</p></li><li><p>全局作用域中函数的 <code>this</code> 不指向 <code>window</code> ， 而是指向 <code>undefined</code></p><ul><li>构造函数中，不加 <code>new</code> 调用，<code>this</code>会报错</li></ul></li><li><p>没有变化的：</p></li><li><p><code>new</code>实例化的构造函数还是指向对象实例</p><ul><li>定时器函数<code>this</code>还是指向<code>window</code></li><li>事件对象还是指向调用者</li></ul></li></ul></li><li><p>函数</p><ul><li><p>函数必须声明在顶层，不允许在<strong>非函数</strong>的代码块内声明函数</p><ul><li>如，函数声明不能在<code>if、for、while</code>中</li></ul></li><li><p>函数的参数<strong>不能重名</strong></p></li></ul></li></ul><h2 id="二、基本语句" tabindex="-1">二、基本语句 <a class="header-anchor" href="#二、基本语句" aria-label="Permalink to &quot;二、基本语句&quot;">​</a></h2><h3 id="_01-条件语句" tabindex="-1">01. 条件语句 <a class="header-anchor" href="#_01-条件语句" aria-label="Permalink to &quot;01. 条件语句&quot;">​</a></h3><h4 id="_1-if" tabindex="-1">（1）<code>if</code> <a class="header-anchor" href="#_1-if" aria-label="Permalink to &quot;（1）\`if\`&quot;">​</a></h4><ul><li><p>语法结构:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // condition == true , 执行这里</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // condition == false , 执行这里</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><h4 id="_2-三元表达式" tabindex="-1">（2）三元表达式 <a class="header-anchor" href="#_2-三元表达式" aria-label="Permalink to &quot;（2）三元表达式&quot;">​</a></h4><ul><li><p>语法结构：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">condition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> true_value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> false_value;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h4 id="_3-switch" tabindex="-1">（3）<code>switch</code> <a class="header-anchor" href="#_3-switch" aria-label="Permalink to &quot;（3）\`switch\`&quot;">​</a></h4><ul><li><p>利用我们的【表达式的值】和<code>case</code>后面的【选项值】相匹配 ：</p></li><li><p>【注意】</p><ul><li>在匹配的时候，是进行【全等于】的匹配，即<strong>数据的值和类型必须完全相等</strong></li><li>如果匹配到当前的<code>case</code>里面没有<code>break</code>，则不会退出<code>switch</code>，而是继续执行下一个<code>case</code>，直到遇到<code>break</code>，或者<code>return</code></li></ul></li><li><p>语法结构：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (value) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // value == &#39;A&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;B&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // value == &#39;B&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // value 为其它值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ul><hr><h3 id="_02-循环语句" tabindex="-1">02. 循环语句 <a class="header-anchor" href="#_02-循环语句" aria-label="Permalink to &quot;02. 循环语句&quot;">​</a></h3><h4 id="_1-while" tabindex="-1">（1）<code>while</code> <a class="header-anchor" href="#_1-while" aria-label="Permalink to &quot;（1）\`while\`&quot;">​</a></h4><ul><li><p>语法结构</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // condition == true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 进入条件表达式：i &lt; 10 ，判断变量是否满足条件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 满足条件，则进入while循环内部，执行循环体 ，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//	  不满足条件，则退出循环</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. while循环里面也必须要有 计数器的 更新，防止死循环</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_2-do-while" tabindex="-1">（2）<code>do while</code> <a class="header-anchor" href="#_2-do-while" aria-label="Permalink to &quot;（2）\`do while\`&quot;">​</a></h4><ul><li><p>语法结构</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // condition == true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>区别：</p><ul><li><code>do while</code>循环会先执行一次循环体，再判断条件是否继续执行循环</li><li><code>while</code>循环是先判断条件，再决定是否执行循环</li></ul></li></ul><h4 id="_3-for" tabindex="-1">（3）<code>for</code> <a class="header-anchor" href="#_3-for" aria-label="Permalink to &quot;（3）\`for\`&quot;">​</a></h4><ul><li><p>语法结构</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">for（初始化变量；条件表达式；操作表达式）{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 	循环体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 执行初始化变量语句：var i = 1 ，（这句话在  for 里面只会执行一次）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 执行条件表达式： i &lt;= 10 ，来判断变量是否满足条件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. 如果满足条件，就执行【循环体】，----&gt;第4步（正常情况下）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//	  如果不满足条件，则退出循环</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4. 执行操作表达式： i++ ，用于控制变量递增</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//		第一轮到这里结束。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//		下一轮从第2步开始执行循环</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="_4-for-in" tabindex="-1">（4）<code>for-in</code> <a class="header-anchor" href="#_4-for-in" aria-label="Permalink to &quot;（4）\`for-in\`&quot;">​</a></h4><h4 id="_5-for-of" tabindex="-1">（5）<code>for-of</code> <a class="header-anchor" href="#_5-for-of" aria-label="Permalink to &quot;（5）\`for-of\`&quot;">​</a></h4><h4 id="_6-注意" tabindex="-1">（6）注意 <a class="header-anchor" href="#_6-注意" aria-label="Permalink to &quot;（6）注意&quot;">​</a></h4><ul><li>【注意】 <ul><li>遇到<code>break</code>，则直接跳出循环</li><li>遇到<code>continue</code>，则跳过本轮循环，进行下一次循环</li></ul></li></ul><h2 id="三、表达式和远算符" tabindex="-1">三、表达式和远算符 <a class="header-anchor" href="#三、表达式和远算符" aria-label="Permalink to &quot;三、表达式和远算符&quot;">​</a></h2><h3 id="_01-运算符" tabindex="-1">01. 运算符 <a class="header-anchor" href="#_01-运算符" aria-label="Permalink to &quot;01. 运算符&quot;">​</a></h3><ul><li>由数字、运算符、变量等组成的式子称为：<strong>表达式</strong></li><li>表达式的结果称为：<strong>返回值</strong></li></ul><h4 id="_1-算术运算符" tabindex="-1">（1）算术运算符 <a class="header-anchor" href="#_1-算术运算符" aria-label="Permalink to &quot;（1）算术运算符&quot;">​</a></h4><ul><li><p>加<code>+</code>、减<code>-</code>、乘<code>*</code>、除<code>\\</code>、取余<code>%</code></p><blockquote><p>【注意】</p><ol><li>浮点数的运算中会有精度问题</li><li>浮点数不能直接拿来进行比较（有误差）</li></ol></blockquote></li></ul><h4 id="_2-递增递减运算" tabindex="-1">（2）递增递减运算 <a class="header-anchor" href="#_2-递增递减运算" aria-label="Permalink to &quot;（2）递增递减运算&quot;">​</a></h4><ul><li><p>前置递增：<code>++num;</code></p><blockquote><p><code>num</code>先自加<strong>1</strong>，然后返回<code>num</code></p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 前置递增</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等价于</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 先让 num 自加 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 后把 num 赋值给 a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 即，最终结果为：a = 2, num = 2;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>后置递增：<code>num++;</code></p><blockquote><p>先返回 <code>num</code>，然后再让<code>num</code>自加<strong>1</strong></p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 后置递增</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等价于</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 先把 num 赋值给 a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 再让 num 自加 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 即，最终结果为：a = 1, num = 2;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ul><h4 id="_3-比较运算符" tabindex="-1">（3）比较运算符 <a class="header-anchor" href="#_3-比较运算符" aria-label="Permalink to &quot;（3）比较运算符&quot;">​</a></h4><ul><li><p>大于<code>&gt;</code>、小于<code>&lt;</code>、等于<code>==</code></p></li><li><p>大于等于<code>&gt;=</code>、小于等于<code>&lt;=</code>、不等于<code>!=</code></p></li><li><p>等于<code>==</code> 和强等于<code>===</code></p><blockquote><p><code>==</code>会默认转换数据类型，会把字符串类型的数据转换为数字类型</p><p><code>===</code>要求<strong>值和数据类型</strong>完全相同</p></blockquote></li></ul><h4 id="_4-赋值运算符" tabindex="-1">（4）赋值运算符 <a class="header-anchor" href="#_4-赋值运算符" aria-label="Permalink to &quot;（4）赋值运算符&quot;">​</a></h4><ul><li><code>num = 5;</code></li><li><code>num += 5;</code>等价于<code>num = num +5;</code></li><li><code>num -= 5;</code>等价于<code>num = num - 5;</code></li><li><code>num *= 5;</code>等价于 <code>num = num * 5;</code></li><li><code>num /= 5;</code>等价于 <code>num = num / 5;</code></li><li><code>num %= 5;</code>等价于 <code>num = num % 5;</code></li></ul><h4 id="_5-逻辑运算符" tabindex="-1">（5）逻辑运算符 <a class="header-anchor" href="#_5-逻辑运算符" aria-label="Permalink to &quot;（5）逻辑运算符&quot;">​</a></h4><ul><li><p>与或非（<code>&amp;&amp;</code>、<code>||</code>、<code>!</code>）</p><ul><li>返回的是布尔值：<code>true</code>、<code>false</code></li><li>如果是具体的数值，则返回数值</li></ul><blockquote><p>与：一假全假</p><p>或：一真全真</p></blockquote></li><li><p><strong>短路运算</strong>（逻辑中断）</p><ul><li><p>当进行“逻辑与”运算时，如果检测到第一个表达式为假，则不再进行后面表达式的判断</p></li><li><p>当进行“逻辑或”运算时，如果检测到第一个表达式为真，也不再进行后面表达式的判断</p></li></ul></li></ul><h4 id="_6-优先级" tabindex="-1">（6）优先级 <a class="header-anchor" href="#_6-优先级" aria-label="Permalink to &quot;（6）优先级&quot;">​</a></h4><ul><li>小括号 &gt; 一元运算符 &gt; 算术运算符 &gt; 比较运算符 &gt; 逻辑运算符 &gt; 赋值运算符&gt;逗号运算符 <ul><li>一元运算符里面，“逻辑非”<code>!</code>优先级很高</li><li>逻辑运算符中：“逻辑与”<code>&amp;&amp;</code>的优先级要大于“逻辑或”<code>||</code></li></ul></li></ul>`,61),p=[e];function t(h,r,d,k,c,o){return a(),i("div",null,p)}const g=s(l,[["render",t]]);export{b as __pageData,g as default};
