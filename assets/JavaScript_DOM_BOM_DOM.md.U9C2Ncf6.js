import{_ as s,c as i,o as a,a3 as e}from"./chunks/framework.BkEKdGEG.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{"created":"2023-08-20T00:00:00.000Z","updated":"2023-08-20T00:00:00.000Z"},"headers":[],"relativePath":"JavaScript/DOM+BOM/DOM.md","filePath":"JavaScript/DOM+BOM/DOM.md","lastUpdated":1716610678000}'),l={name:"JavaScript/DOM+BOM/DOM.md"},n=e(`<h2 id="dom" tabindex="-1">DOM <a class="header-anchor" href="#dom" aria-label="Permalink to &quot;DOM&quot;">​</a></h2><h3 id="_01-dom-概述" tabindex="-1">01. DOM 概述 <a class="header-anchor" href="#_01-dom-概述" aria-label="Permalink to &quot;01. DOM 概述&quot;">​</a></h3><ul><li>DOM：<code>Document Object Model</code>，文档对象模型 <ul><li>是 W3C 组织定义的编程接口，通过这些<code>DOM</code>接口可以改变网页的内容、结构和样式</li></ul></li><li>DOM 树： <ul><li>文档：一个页面就是一个文档</li><li>元素：页面中的所有<strong>标签</strong>都属于元素</li><li>节点：网页中的所有<strong>内容</strong>都属于节点</li></ul></li><li>针对元素的操作：创建、增、删、改、查、属性操作、事件操作</li></ul><h3 id="_02-获取-dom-元素" tabindex="-1">02. 获取 DOM 元素 <a class="header-anchor" href="#_02-获取-dom-元素" aria-label="Permalink to &quot;02. 获取 DOM 元素&quot;">​</a></h3><ul><li>获取 DOM 元素后，返回的是一个对象</li><li>特别的 <ul><li>获取<code>body</code>元素：<code>document.body</code></li><li>获取<code>HTML</code>元素：<code>document.documentElement</code></li></ul></li></ul><h4 id="_1-id" tabindex="-1">（1）<code>ID</code> <a class="header-anchor" href="#_1-id" aria-label="Permalink to &quot;（1）\`ID\`&quot;">​</a></h4><ul><li><p>语法：<code>document.getElementById()</code></p></li><li><p><code>ID</code>绑定的元素是唯一的，所以是<code>Element</code></p></li></ul><h4 id="_2-tagname" tabindex="-1">（2）<code>tagName</code> <a class="header-anchor" href="#_2-tagname" aria-label="Permalink to &quot;（2）\`tagName\`&quot;">​</a></h4><ul><li>语法：<code>document.getElementsByTagName()</code><ul><li>标签名可以有多个，所以是<code>Elements</code></li><li>获取到的是元素对象的<strong>集合**</strong>，<strong>以</strong>=**的形式存储（不管元素是：一个、多个、没有，都是伪数组）</li></ul></li><li>语法：<code>element.getElementsByTagName() </code><ul><li>获取指定父元素<code>element</code>内部的子元素</li><li>【注意】父元素必须是单个对象、是唯一的，即必须<strong>指明是</strong>哪一个元素对象</li></ul></li></ul><h4 id="_3-classname" tabindex="-1">（3）<code>className</code> <a class="header-anchor" href="#_3-classname" aria-label="Permalink to &quot;（3）\`className\`&quot;">​</a></h4><ul><li>语法：<code>document.getElementsByClassName() </code><ul><li>类名可以有多个，所以是<code>Elements</code></li><li>获取到的是元素对象的<strong>集合</strong>，以<strong>伪数组</strong>的形式存储（不管元素是：一个、多个、没有，都是伪数组）</li></ul></li></ul><h4 id="_4-selector" tabindex="-1">（4）<code>selector</code> <a class="header-anchor" href="#_4-selector" aria-label="Permalink to &quot;（4）\`selector\`&quot;">​</a></h4><ul><li><p>注意：这里的选择器同<strong>CSS 选择器</strong>的使用方法一样</p><ul><li>如标签名直接使用标签，类名需要加前缀<code>.</code>，id 名需要前缀<code>#</code></li></ul></li><li><p><code>doucument.querySelector()</code></p><ul><li>返回指定选择器的<strong>第一个元素对象</strong></li></ul></li><li><p><code>doucument.querySelectorAll()</code></p><ul><li>返回指定选择器里的<strong>所有元素对象</strong></li></ul></li></ul><h4 id="_5-节点" tabindex="-1">（5）节点 <a class="header-anchor" href="#_5-节点" aria-label="Permalink to &quot;（5）节点&quot;">​</a></h4><ul><li><p>页面中所有内容都是节点</p></li><li><p>节点的基本属性：</p><ul><li><p><code>nodeType</code>：节点类型</p><ul><li>元素节点：<code>nodeType</code>为<code>1</code></li><li>属性节点：<code>nodeType</code>为<code>2</code></li><li>文本节点：<code>nodeType</code>为<code>3</code>（文本节点包括文字、空格、换行等）</li></ul></li><li><p><code>nodeName</code>：节点名称</p></li><li><p><code>nodeValue</code>：节点值</p></li></ul></li><li><p>父级节点：</p><ul><li><code>parentNode</code>：获取当前元素最近的父级节点，如果没有则返回<code>null</code></li></ul></li><li><p>子级节点：</p><ul><li><p><code>childNodes</code>：</p><ul><li>所有子节点，包含元素节点、文本节点</li></ul></li><li><p><code>children</code>：</p><ul><li>获取所有的子元素节点</li></ul></li><li><p><code>firstChild</code>和<code>lastChild</code>：</p><ul><li>获取第一个（最后一个）子节点，不管是文本节点还是元素节点</li></ul></li><li><p><code>firstElementChild</code>和<code>lastElementChild</code>：</p><ul><li>获取第一个（最后一个）子元素节点，有兼容性问题 ，IE9 以上才支持</li></ul></li><li><p><code>parentNode.children[0]</code> 和 <code>parentNode.children[parentNode.children.length - 1]</code></p><ul><li>返回第一个（最后一个）子元素，没有兼容性问题</li><li><code>parentNode.children</code>返回的是一个伪数组</li><li><code>parentNode.children.length - 1</code>：表示最后一个子元素</li></ul></li></ul></li><li><p>兄弟节点：</p><ul><li><p><code>nextSibling</code>和<code>previousSibling</code></p><ul><li>获取下一个（上一个）兄弟节点，包含元素节点或者文本节点等等</li></ul></li><li><p><code>nextElementSibling</code>和<code>previousElementSibling</code></p><ul><li>获取下一个（上一个）兄弟元素节点，兼容性问题，IE9 以上才支持</li></ul></li><li><p>解决兼容性问题：自己封装一个函数</p><ul><li>通过判断<code>nodeType</code>值，使用第一种方法实现</li></ul></li></ul></li></ul><h3 id="_03-操作元素" tabindex="-1">03. 操作元素 <a class="header-anchor" href="#_03-操作元素" aria-label="Permalink to &quot;03. 操作元素&quot;">​</a></h3><h4 id="_1-创建元素节点" tabindex="-1">（1）创建元素节点 <a class="header-anchor" href="#_1-创建元素节点" aria-label="Permalink to &quot;（1）创建元素节点&quot;">​</a></h4><ul><li><p><code>document.createElement(&quot;tag&quot;);</code></p><ul><li>动态创建一个<code>tag</code>节点</li></ul></li></ul><h4 id="_2-添加元素节点" tabindex="-1">（2）添加元素节点 <a class="header-anchor" href="#_2-添加元素节点" aria-label="Permalink to &quot;（2）添加元素节点&quot;">​</a></h4><ul><li><p><code>parentNode.appendChild(&quot;child&quot;);</code></p><ul><li>在父元素<code>parentNode</code>的末尾，追加一个子元素<code>child</code></li></ul></li><li><p><code>parentNode.insertBefore(&quot;child&quot;, &quot;指定元素&quot;);</code></p><ul><li>在父元素<code>parentNode</code>中，将子元素<code>child</code>添加到指定的其它子元素的前面</li></ul></li></ul><h4 id="_3-删除元素节点" tabindex="-1">（3）删除元素节点 <a class="header-anchor" href="#_3-删除元素节点" aria-label="Permalink to &quot;（3）删除元素节点&quot;">​</a></h4><ul><li><p><code>parentNode.removeChild(&quot;child&quot;);</code></p><ul><li>删除父元素<code>parentNode</code>的子元素<code>child</code></li></ul></li></ul><h4 id="_4-复制元素节点" tabindex="-1">（4）复制元素节点 <a class="header-anchor" href="#_4-复制元素节点" aria-label="Permalink to &quot;（4）复制元素节点&quot;">​</a></h4><ul><li><p><code>node.cloneNode();</code></p><ul><li>返回调用该方法的节点的一个副本</li><li>如果括号为空，或者<code>false</code>，则为 浅拷贝 ，只复制标签不复制里面的内容</li><li>如果括号为<code>true</code>，则为 深拷贝 ，会同时复制标签和里面的内容</li></ul></li></ul><h4 id="_5-区别" tabindex="-1">（5）区别 <a class="header-anchor" href="#_5-区别" aria-label="Permalink to &quot;（5）区别&quot;">​</a></h4><ul><li><p><code>document.write</code>、<code>element.innerHTML</code>、<code>document.createElement()</code></p></li><li><p>关于<code>document.write()</code></p><ul><li><code>document.write</code>是直接将内容写入页面的内容流</li><li>如果是在文档流执行完毕后，执行<code>document.write</code>，则会导致页面内容全部重绘</li></ul></li><li><p>关于<code>element.innerHTML</code></p><ul><li>创建多个元素的效率高，但结构稍微复杂</li><li>但通过拼接字符串的方法添加元素到页面中效率很低（字符串的不可变性）</li><li>因此，可以通过数组的方法<code>push()</code>添加元素，效率最高</li></ul></li><li><p>关于<code>document.createElement()</code></p><ul><li>创建多个元素的效率低，但结构更清晰</li><li>通过<code>appenChild()</code>直接追加子元素到父元素末尾，效率高</li></ul></li></ul><h3 id="_04-改变元素内容" tabindex="-1">04. 改变元素内容 <a class="header-anchor" href="#_04-改变元素内容" aria-label="Permalink to &quot;04. 改变元素内容&quot;">​</a></h3><h4 id="_1-innertext" tabindex="-1">（1）<code>innerText</code> <a class="header-anchor" href="#_1-innertext" aria-label="Permalink to &quot;（1）\`innerText\`&quot;">​</a></h4><ul><li><strong>不识别 HTML 标签</strong></li><li>在读取内容时，会<strong>跳过空格、换行、HTML 标签</strong></li><li>在写入内容时，会将**HTML 标签（如果有）**一起写入</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;p&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  &lt;p&gt; 没有变化&lt;span&gt;还是没有&lt;/span&gt; &lt;/P&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在读取内容时，会跳过元素内部的HTML标签、空格、换行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p.innerText; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出结果：没有变化 还是没有</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在写入内容时，会把HTML标签 一起写入内容中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">innerText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;strong&gt;改变内容&lt;/strong&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出结果：&lt;strong&gt;改变内容&lt;/strong&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_2-innerhtml" tabindex="-1">（2）<code>innerHTML</code> <a class="header-anchor" href="#_2-innerhtml" aria-label="Permalink to &quot;（2）\`innerHTML\`&quot;">​</a></h4><ul><li><strong>可识别 HTMl 标签</strong></li><li>在读取内容时，会<strong>保留页面原有的空格、换行、标签</strong></li><li>在写入内容时，会<strong>应用 HTMl 标签（如果有）</strong></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;p&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//	&lt;p&gt; 没有变化&lt;span&gt;还是没有&lt;/span&gt; &lt;/P&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//在读取内容时，会将元素内部的HTML标签、空格、换行一起显示出来</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p.innerHTML; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//	输出结果：没有变化&lt;span&gt;还是没有&lt;/span&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//在写入内容时，会识别到 HTML 标签并应用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">innerHTML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;strong&gt;改变内容&lt;/strong&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出结果（加粗的）：改变内容</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>其它 <ul><li><strong>【注意】<strong>表单元素<code>form</code>里面的内容是通过</strong>元素属性</strong>更改的！！！</li></ul></li></ul><h3 id="_05-改变元素属性" tabindex="-1">05. 改变元素属性 <a class="header-anchor" href="#_05-改变元素属性" aria-label="Permalink to &quot;05. 改变元素属性&quot;">​</a></h3><h4 id="_1-内置属性获取" tabindex="-1">（1）内置属性获取 <a class="header-anchor" href="#_1-内置属性获取" aria-label="Permalink to &quot;（1）内置属性获取&quot;">​</a></h4><ul><li><p><code>element.属性名</code></p><blockquote><p>主要获取内置属性，自定义属性无法通过这种方式获取</p></blockquote><ul><li><code>element.属性名 = “属性值”;</code></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> img </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">img.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;url&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">img.title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;new_title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h4 id="_2-自定义属性获取" tabindex="-1">（2）自定义属性获取 <a class="header-anchor" href="#_2-自定义属性获取" aria-label="Permalink to &quot;（2）自定义属性获取&quot;">​</a></h4><ul><li><p><strong>兼容性获取：</strong></p><ul><li><p><code>element.getAttribute(&quot;属性名&quot;);</code></p><blockquote><p>主要获取自定义属性</p></blockquote></li><li><p><code>element.setAttribute(&quot;属性名&quot;,&quot;属性值&quot;);</code></p><blockquote><p>设置自定义属性</p></blockquote></li><li><p><code>element.removeAttribute(&quot;属性名&quot;);</code></p><hr></li></ul></li><li><p><strong>H5 新增：</strong></p><blockquote><p>H5 新增的规定，将以<code>data-</code>开头的属性名作为<strong>自定义属性</strong></p></blockquote><ul><li><p><code>element.dataset.属性名</code>：获取属性，适用于以<code>data-</code>开头的自定义属性，属性名是<code>data-</code>后面的值</p><blockquote><p>这个方法只能获取以<code>data-</code>开头的，<code>dataset</code>是一个集合，里面存放了所有以<code>data-</code>开头的自定义属性</p></blockquote></li><li><p>如果属性有多个<code>-</code>连接的单词，【需要注意】，在获取时，从第二个<code>-</code>开始，需要驼峰命名</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-last-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;demo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> div </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//获取 data-index 属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.dataset.index;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//获取 data-last-name 属性，驼峰命名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.dataset.lastName;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul></li></ul><h3 id="_06-改变元素样式" tabindex="-1">06. 改变元素样式 <a class="header-anchor" href="#_06-改变元素样式" aria-label="Permalink to &quot;06. 改变元素样式&quot;">​</a></h3><h4 id="_1-element-style" tabindex="-1">（1）<code>element.style</code> <a class="header-anchor" href="#_1-element-style" aria-label="Permalink to &quot;（1）\`element.style\`&quot;">​</a></h4><blockquote><p>对元素的<strong>行内样式</strong>进行操作</p><p>【注意】：如果样式没有写在<strong>行内</strong>，是无法通过这种方式获取到的</p></blockquote><ul><li><p>使用方法：+<code>.属性</code></p><blockquote><p>注意属性名是驼峰命名法，且没有分隔符</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.style.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.style.fontSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h4 id="_2-element-classname" tabindex="-1">（2）<code>element.className</code> <a class="header-anchor" href="#_2-element-classname" aria-label="Permalink to &quot;（2）\`element.className\`&quot;">​</a></h4><blockquote><p>对样式文件中的<strong>类名样式</strong>进行操作</p></blockquote><ul><li><p>改变当前元素的类名，注意会覆盖原先的类名</p></li><li><p>可通过拼接字符串的方式添加，避免覆盖</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.className </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; newClassName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//注意要加空格</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>运用：<strong>精灵图</strong>的实现方法</p><ul><li><code>for</code>循环遍历，改变<code>backgroundPosition</code>的属性值</li></ul></li></ul><h3 id="_07-元素事件" tabindex="-1">07. <strong>元素事件</strong> <a class="header-anchor" href="#_07-元素事件" aria-label="Permalink to &quot;07. **元素事件**&quot;">​</a></h3><h4 id="_1-基本事件组成" tabindex="-1">（1）基本事件组成 <a class="header-anchor" href="#_1-基本事件组成" aria-label="Permalink to &quot;（1）基本事件组成&quot;">​</a></h4><ul><li>事件三要素： <ul><li><strong>事件源</strong>：被触发事件的对象</li><li><strong>事件类型</strong>：如何触发事件，如：点击、滑过、键盘输入等</li><li><strong>事件处理程序</strong>：完成什么事件</li></ul></li><li>关于<code>this</code><ul><li><code>this</code>指向的是<strong>事件函数</strong>的<strong>调用者</strong></li></ul></li></ul><h4 id="_2-基本事件执行过程" tabindex="-1">（2）基本事件执行过程 <a class="header-anchor" href="#_2-基本事件执行过程" aria-label="Permalink to &quot;（2）基本事件执行过程&quot;">​</a></h4><ul><li><p>代码示例</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//1. 首先获取事件源元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> btn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;btn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//2. 然后 绑定事件（注册事件）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//3. 最后添加事件处理程序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;触发事件&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul><h4 id="_3-事件注册" tabindex="-1">（3）事件注册 <a class="header-anchor" href="#_3-事件注册" aria-label="Permalink to &quot;（3）事件注册&quot;">​</a></h4><ul><li><p>传统注册方式<code>on</code></p><ul><li>利用<code>on</code>开头的事件，如：<code>onclick</code></li><li><strong>唯一性</strong>：同一个元素的同一个事件只能设置一个处理函数，最后注册的处理函数会覆盖前面注册的处理函数</li></ul></li><li><p><code>addEventListener</code></p><ul><li><p>语法结构：<code>eventTarget.addEventListener(type, listener, useCapture);</code></p><ul><li><p>将指定的监听器注册到<code>eventTarget</code>（目标对象）上</p></li><li><p><code>type</code>：事件类型字符串，如<code>click</code>、<code>mousemover</code></p></li><li><p><code>listener</code>：事件处理函数，事件发生时，会调用该监听函数</p></li><li><p><code>useCapture</code>：可选参数，是一个布尔值，默认<code>false</code></p></li></ul></li><li><p>注册事件</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 为目标函数绑定 type 事件，该事件的处理函数是 function</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eventTarget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul></li></ul><h4 id="_4-事件移除" tabindex="-1">（4）事件移除 <a class="header-anchor" href="#_4-事件移除" aria-label="Permalink to &quot;（4）事件移除&quot;">​</a></h4><ul><li><p>传统方式删除事件</p></li><li><p>直接赋值为<code>Null</code>：<code>eventTarget.onclick = null</code></p></li><li><p><code>removeEventListener</code></p><ul><li>通过<code>removeListener</code>方法：<code>eventTarget.removeListener</code></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 移除目标对象的 type 事件，该事件绑定 function 处理函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eventTarget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h3 id="_08-事件流" tabindex="-1">08. 事件流 <a class="header-anchor" href="#_08-事件流" aria-label="Permalink to &quot;08. 事件流&quot;">​</a></h3><h4 id="_1-概念" tabindex="-1">（1）概念 <a class="header-anchor" href="#_1-概念" aria-label="Permalink to &quot;（1）概念&quot;">​</a></h4><ul><li><p>事件流是指：从页面中接收事件的顺序</p><ul><li>事件发生时，会在元素节点之间，按照特定的顺序传播，这个传播过程即 DOM 事件流</li></ul></li></ul><h4 id="_2-两个阶段" tabindex="-1">（2）两个阶段 <a class="header-anchor" href="#_2-两个阶段" aria-label="Permalink to &quot;（2）两个阶段&quot;">​</a></h4><h5 id="a-捕获阶段" tabindex="-1">（a）捕获阶段 <a class="header-anchor" href="#a-捕获阶段" aria-label="Permalink to &quot;（a）捕获阶段&quot;">​</a></h5><ul><li>从 DOM 最顶层的节点开始，然后<strong>逐级向下传播</strong>，到目标元素接收的过程</li><li>在逐级向下传播（沉底）中 <ul><li>如果有<strong>祖先元素</strong>绑定了相同类型事件（如点击事件）</li><li>那么在触发<strong>目标后代元素事件</strong>时（点击后）</li><li>会按照沉底的顺序（<strong>从上到下</strong>）</li><li>依次触发事件（点击的事件）</li></ul></li></ul><h5 id="b-冒泡阶段" tabindex="-1">（b）冒泡阶段 <a class="header-anchor" href="#b-冒泡阶段" aria-label="Permalink to &quot;（b）冒泡阶段&quot;">​</a></h5><ul><li>事件开始时，从目标事件元素开始接收，然后<strong>逐级向上</strong>传播，到 DOM 最顶层的节点，这一过程</li><li>在逐级向上传播（冒泡）中 <ul><li>如果有<strong>祖先元素</strong>绑定了相同类型事件（如点击事件）</li><li>那么在触发<strong>目标后代元素</strong>事件时（点击后）</li><li>会按照冒泡的顺序（<strong>从下到上</strong>）</li><li>依次<strong>触发事件</strong>（点击的事件）</li></ul></li></ul><h4 id="_3-其它" tabindex="-1">（3）其它 <a class="header-anchor" href="#_3-其它" aria-label="Permalink to &quot;（3）其它&quot;">​</a></h4><ul><li><code>onclick</code>等<code>on</code>开头的事件，只会触发冒泡阶段 <ul><li>【注意】<code>onblur</code>、<code>onfocus</code>、<code>onmouseenter</code>、<code>onmouseleave</code>是没有冒泡阶段的</li></ul></li><li><code>addEventListener</code>可以触发多个阶段 <ul><li><code>useCapture</code>：参数值为<code>true</code>，则为捕获阶段</li><li><code>useCapture</code>：参数值为<code>false</code>，则为冒泡阶段</li></ul></li></ul><h3 id="_09-事件对象" tabindex="-1">09. 事件对象 <a class="header-anchor" href="#_09-事件对象" aria-label="Permalink to &quot;09. 事件对象&quot;">​</a></h3><h4 id="_1-概念-1" tabindex="-1">（1）概念 <a class="header-anchor" href="#_1-概念-1" aria-label="Permalink to &quot;（1）概念&quot;">​</a></h4><ul><li><p>事件发生后，跟事件相关的一系列信息<strong>数据集合</strong>，都会存放在这个事件对象<code>event</code>里面</p><ul><li><code>event</code>对象，代表<strong>事件的状态</strong>，比如键盘按键的状态、鼠标的位置、鼠标按钮的状态等</li></ul></li><li><p>事件对象只有在<strong>有事件时</strong>才会存在，它是系统给<strong>自动创建</strong>的，即<strong>不需要传参</strong>进去</p></li><li><p><em>事件对象的兼容性问题</em></p><ul><li><p>IE6、7、8，只会识别 <code>window.event </code></p><blockquote><p>兼容： <code>e = e || window.event;</code></p></blockquote></li></ul></li></ul><h4 id="_2-常用属性和方法" tabindex="-1">（2）常用属性和方法 <a class="header-anchor" href="#_2-常用属性和方法" aria-label="Permalink to &quot;（2）常用属性和方法&quot;">​</a></h4><ul><li><p><code>e.target</code>：返回<strong>触发事件</strong>的对象（谁触发的事件，就返回谁）</p><ul><li><code>this</code>：返回的是<strong>绑定事件</strong>的对象（谁绑定的事件，就返回谁）</li></ul></li><li><p>返回触发事件的<strong>类型</strong></p><ul><li><code>e.type</code></li></ul></li><li><p><strong>阻止默认事件</strong></p><ul><li><p>高版本：<code>e.preventDefault()</code>：</p></li><li><p>低版本（IE6、7、8）：<code>e.returnValue</code></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 普通浏览器 e.preventDefault();  方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 低版本浏览器 ie678  returnValue  属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  e.returnValue;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 我们可以利用return false 也能阻止默认行为</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 没有兼容性问题</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul></li><li><p><strong>阻止事件冒泡</strong></p><ul><li><p>标准写法：<code>e.stopPropagation()</code></p></li><li><p>非标准写法：<code>e.cancelBubble = true</code></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.stopPropagation) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stopPropagation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  window.event.cancelBubble </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul></li></ul><h4 id="_3-事件委托" tabindex="-1">（3）事件委托 <a class="header-anchor" href="#_3-事件委托" aria-label="Permalink to &quot;（3）事件委托&quot;">​</a></h4><ul><li>事件委托，或者称为事件代理、委派 <ul><li>不需要给每个子节点单独设置事件监听器，而是<strong>把事件监听器设置在其父节点上</strong>，即<strong>把事件委托给了父节点</strong></li><li>因为事件冒泡，点击子节点后，事件会<strong>冒泡到父节点</strong>上，同样会触发事件</li><li>然后可以通过<code>e.target</code>找到是哪一个子节点<strong>触发</strong>的事件（点击了谁）</li></ul></li><li>事件委托的好处：只需要操作一次 DOM</li></ul><h3 id="_10-鼠标事件" tabindex="-1">10. 鼠标事件 <a class="header-anchor" href="#_10-鼠标事件" aria-label="Permalink to &quot;10. 鼠标事件&quot;">​</a></h3><h4 id="_1-基本事件" tabindex="-1">（1）基本事件 <a class="header-anchor" href="#_1-基本事件" aria-label="Permalink to &quot;（1）基本事件&quot;">​</a></h4><ul><li><p><code>onclick</code>：鼠标点击事件</p></li><li><p><code>onfocus</code>：获得焦点事件</p></li><li><p><code>onblur</code>：失去焦点事件</p></li><li><p><code>onmouseover</code>：鼠标经过事件</p><ul><li>经过子元素也会触发父元素的事件</li></ul></li><li><p><code>onmouseenter</code>：鼠标经过事件（不会冒泡）</p><ul><li>只有经过盒子本身才触发</li></ul></li><li><p><code>onmouseout</code>：鼠标离开事件</p><ul><li>经过子元素也会触发父元素的事件</li></ul></li><li><p><code>onmouseleave</code>：鼠标离开事件（不会冒泡）</p><ul><li>只有经过盒子本身才触发</li></ul><hr></li><li><p>阻止链接跳转</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;javascript:void(0);&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;点击不跳转&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;javascript:;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;点击不跳转&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><hr></li><li><p>禁用鼠标右键菜单：<code>contextmenu</code></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;contextmenu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>禁止鼠标选中：<code>selectstart</code></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;selectstart&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h4 id="_2-鼠标事件对象" tabindex="-1">（2）鼠标事件对象 <a class="header-anchor" href="#_2-鼠标事件对象" aria-label="Permalink to &quot;（2）鼠标事件对象&quot;">​</a></h4><ul><li><p>鼠标坐标</p><ul><li><p><code>e.clientX</code>和<code>e.clientY</code></p><blockquote><p>得到鼠标相对于 <code>client</code><strong>可视窗口区域</strong>的坐标</p></blockquote></li><li><p><code>e.pageX</code>和<code>e.pageY</code>————（主要）</p><blockquote><p>得到鼠标相对于<strong>页面文档</strong>的坐标</p></blockquote></li><li><p><code>e.screenX</code>和<code>e.screenY</code></p><blockquote><p>得到鼠标相对于<strong>电脑屏幕</strong>的坐标</p></blockquote></li></ul></li><li><p>鼠标移动</p><ul><li><p><code>mousemove</code></p><blockquote><p>只要鼠标移动，就触发事件</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mousemove&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;X坐标:&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.pageX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;,Y坐标:&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.pageY);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul></li></ul><hr><h3 id="_11-键盘事件" tabindex="-1">11. 键盘事件 <a class="header-anchor" href="#_11-键盘事件" aria-label="Permalink to &quot;11. 键盘事件&quot;">​</a></h3><h4 id="_1-基本事件-1" tabindex="-1">（1）基本事件 <a class="header-anchor" href="#_1-基本事件-1" aria-label="Permalink to &quot;（1）基本事件&quot;">​</a></h4><ul><li><p><code>keyup</code> ：按键<strong>弹起</strong>的时候触发</p><ul><li>松开键盘时只触发一次</li></ul></li><li><p><code>keydown</code> ：按键<strong>按下</strong>的时候触发</p></li><li><p><strong>可识别功能键</strong></p><ul><li>如果持续按下会<strong>一直触发</strong></li></ul></li><li><p><code>keypress</code> ：按键<strong>按下</strong>的时候触发</p></li><li><p><strong>不可识别功能键</strong>，如<code>ctrl</code>、<code>shift</code>、 左右箭头等</p></li><li><p>键盘事件的响应顺序：<code>keydown</code> → <code>keypress</code> → <code>keyup</code></p><ul><li>【注意】三者的区别与应用场景</li></ul></li></ul><h4 id="_2-键盘事件对象" tabindex="-1">（2） 键盘事件对象 <a class="header-anchor" href="#_2-键盘事件对象" aria-label="Permalink to &quot;（2） 键盘事件对象&quot;">​</a></h4><ul><li><p><code>e.keycode</code>：返回对应按键的 ASCII 码值，可以用来判断用户按下了哪一个键</p></li><li><p><code>keyup</code>、<code>keydown</code>不区分字母大小写，且以大写状态显示键值</p></li><li><p><code>keypress</code>可以区分字母大小写</p></li></ul>`,83),t=[n];function p(h,d,o,r,c,k){return a(),i("div",null,t)}const E=s(l,[["render",p]]);export{g as __pageData,E as default};
