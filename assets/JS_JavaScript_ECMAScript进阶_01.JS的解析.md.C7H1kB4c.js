import{_ as s,c as i,o as n,a1 as a}from"./chunks/framework.yskgK-vV.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"JS/JavaScript/ECMAScript进阶/01.JS的解析.md","filePath":"JS/JavaScript/ECMAScript进阶/01.JS的解析.md"}'),l={name:"JS/JavaScript/ECMAScript进阶/01.JS的解析.md"},p=a(`<h2 id="js-的解析" tabindex="-1">JS 的解析 <a class="header-anchor" href="#js-的解析" aria-label="Permalink to &quot;JS 的解析&quot;">​</a></h2><h3 id="_01-js-解析" tabindex="-1">01. JS 解析 <a class="header-anchor" href="#_01-js-解析" aria-label="Permalink to &quot;01. JS 解析&quot;">​</a></h3><ul><li>在浏览器渲染过程中，当遇到 JS 代码或者<code>&lt;script&gt;</code>标签，就会调用浏览器的<strong>JS 引擎对 JS 进行解析</strong><ul><li>这里要注意<code>&lt;script&gt;</code>标签 <ul><li>正常情况下是：当遇到<code>&lt;script&gt;</code>标签，浏览器会立即下载脚本，然后执行脚本，这个过程会阻碍<code>HTML</code>的解析</li><li>如果添加<code>async</code>属性： <ul><li>在继续解析<code>HTML</code>的同时，异步下载脚本，下载完后立即执行</li><li>执行时有可能会阻碍<code>HTML</code>的解析（<code>HTML</code>解析未完成）</li></ul></li><li>如果添加<code>defer</code>属性： <ul><li>完全不会阻碍<code>HTML</code>的解析，会异步下载脚本，并在<code>HTML</code>解析完成后再执行脚本</li></ul></li></ul></li></ul></li><li><code>JavaScript</code>属于<strong>解释型语言</strong>，<code>JavaScript</code>的执行分为两个阶段：<strong>解释阶段</strong>和<strong>执行阶段</strong></li></ul><h4 id="_1-解释阶段" tabindex="-1">（1）解释阶段 <a class="header-anchor" href="#_1-解释阶段" aria-label="Permalink to &quot;（1）解释阶段&quot;">​</a></h4><ul><li>解释阶段分为三个过程 <ul><li><strong>词法分析</strong><ul><li>将 JS 拆分成对应的<code>Token</code>，<code>Token</code>是能拆分的最小单位</li><li>使用<code>type</code>表示类型/属性；使用<code>value</code>表示对应的值；</li></ul></li><li><strong>语法分析</strong><ul><li>将词法分析的结果<code>Token</code>转换成对应的抽象语法树<code>AST</code></li></ul></li><li><strong>作用域规则确定</strong><ul><li>所以，<code>JS</code>中的作用域是在定义的时候就已经确定了，而不是在执行的时候才确定的</li></ul></li></ul></li></ul><h4 id="_2-执行阶段" tabindex="-1">（2）执行阶段 <a class="header-anchor" href="#_2-执行阶段" aria-label="Permalink to &quot;（2）执行阶段&quot;">​</a></h4><ul><li><p>执行阶段分为三个过程</p><ul><li><p><strong>创建执行上下文</strong></p><ul><li><p><code>JavaScript</code>引擎会创建一个执行上下文栈（<code>Execution Context Stack</code>，<code>ECS</code>）来管理执行上下文</p></li><li><p>所有要运行的代码都会放入这个栈中执行</p></li></ul></li><li><p><strong>执行函数代码</strong></p><ul><li>到这里，就是是我们熟悉的 JS<strong>事件循环机制</strong>啦</li></ul></li><li><p><strong>垃圾回收</strong></p><ul><li>标记清除法</li><li>循环引用法</li></ul></li></ul></li></ul><h3 id="_02-执行上下文栈" tabindex="-1">02. 执行上下文栈 <a class="header-anchor" href="#_02-执行上下文栈" aria-label="Permalink to &quot;02. 执行上下文栈&quot;">​</a></h3><ul><li><p><code>JavaScript</code>引擎会创建一个<strong>执行上下文栈</strong>（<code>Execution Context Stack</code>，<code>ECS</code>）来管理执行上下文，我们用<code>ECStack</code>来表示这个执行上下文栈</p><ul><li>事实上，执行上下文栈就是后文的<strong>调用栈</strong>、<strong>执行栈</strong></li></ul></li><li><p>首先，JS 会进入<strong>预编译阶段</strong>，这个阶段主要是根据不同的环境创建执行上下文，主要包括以下三种执行上下文：</p><ul><li><strong>全局执行上下文</strong>：运行代码的主体，存在于函数之外的所有代码</li><li><strong>局部函数执行上下文</strong>：每个函数在执行时，都会创建自己的执行上下文</li><li><strong>Eval 函数执行上下文</strong>：使用<code>eval()</code>函数，会创建一个新的执行上下文，<s>（但不经常使用，所以这里不展开）</s></li></ul></li></ul><h3 id="_03-创建执行上下文-旧版" tabindex="-1">03. 创建执行上下文（旧版） <a class="header-anchor" href="#_03-创建执行上下文-旧版" aria-label="Permalink to &quot;03. 创建执行上下文（旧版）&quot;">​</a></h3><ul><li><strong>ES3 规范</strong>中的执行上下文包括三个重要属性 <ul><li>生成<strong>变量环境</strong>，或者说<strong>变量对象</strong>（<code>VO</code>，<code>Variable Object</code>）</li><li>创建<strong>作用域链</strong>（<code>Scope Chain</code>）</li><li>确定<code>this</code>指向</li></ul></li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ECStack </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  VO: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scopeChain: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  this: window,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_1-生成变量对象" tabindex="-1">（1）生成变量对象 <a class="header-anchor" href="#_1-生成变量对象" aria-label="Permalink to &quot;（1）生成变量对象&quot;">​</a></h4><ul><li>变量对象是与执行上下文相关的<strong>数据作用域</strong>，存储了在上下文中定义的<strong>变量</strong>和<strong>函数</strong>声明</li><li><strong>创建变量环境主要步骤</strong>： <ul><li>创建**<code>arguments</code>对象** <ul><li>由名称和对应值组成的一个变量对象的属性被创建</li><li>没有实参，属性值设为 <code>undefined</code></li></ul></li><li>检查<strong>函数<code>function</code>声明</strong><ul><li>在<code>VO</code>上创建一个属性，并将其属性值设置为函数所在的堆内存地址引用</li><li>如果函数已经存在，这个引用指针会<strong>被重写</strong>（函数声明提升）</li></ul></li><li>检查<strong>变量声明</strong><ul><li>在<code>VO</code>上创建一个属性，并将属性值初始化为<code>undefined</code></li><li>如果变量的名字在<code>VO</code>上已经存在，将<strong>不会进行任何操作</strong>（变量声明提升）</li></ul></li></ul></li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 转换后</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fooStack </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   VO: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       arguments: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           length: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       c: pointer to </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   scopeChain: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   this: window</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><ul><li><p>这里又可分为<strong>全局上下文变量对象</strong>和<strong>函数上下文变量对象</strong></p><ul><li><p>全局上下文中的变量对象就是<strong>全局对象</strong></p></li><li><p>函数上下文中的变量对象</p><ul><li><p>在<strong>函数执行上下文</strong>中，我们用<strong>活动对象</strong>（<code>AO</code>，<code>Activation Object</code>）来表示变量对象</p></li><li><p>只有被激活的变量对象（也就是活动对象）上的各种属性才能被访问</p><ul><li>活动对象是在进入函数上下文时被创建的</li></ul></li></ul></li></ul></li></ul><h4 id="_2-创建作用域链" tabindex="-1">（2）创建作用域链 <a class="header-anchor" href="#_2-创建作用域链" aria-label="Permalink to &quot;（2）创建作用域链&quot;">​</a></h4><ul><li>作用域链，由<strong>当前环境的变量对象</strong>（未进入执行阶段前的<code>VO</code>），与<strong>上层环境的一系列活动对象</strong>（<code>AO</code>）组成 <ul><li>保证了当前环境对符合访问权限的变量与函数的<strong>有序访问</strong></li></ul></li><li>当查找变量的时候 <ul><li>会先从<strong>当前作用域</strong>查找，也就是<strong>当前上下文的变量对象</strong></li><li>如果没有找到，就会到<strong>上一级的作用域</strong>去查找，也就是<strong>父级的执行上下文的变量对象</strong></li><li>一直找到<strong>全局作用域</strong>，也就是<strong>全局上下文的变量对象</strong>，也就是<strong>全局对象</strong></li><li>如果没有找到，则会抛出<code>ReferenceError</code>异常</li><li>这样由多个执行上下文的变量对象构成的链表就叫做<strong>作用域链</strong></li></ul></li><li>函数的作用域在函数<strong>定义</strong>的时候就决定了 <ul><li>这是因为函数有一个内部属性 <code>[[scope]]</code></li><li>当函数创建的时候，就会保存<strong>所有父级的变量对象</strong>到其中</li><li>你可以理解 <code>[[scope]]</code> 就是所有父变量对象的<strong>层级链</strong></li><li><strong>但是注意：<code>[[scope]]</code> 并不代表完整的作用域链！</strong></li></ul></li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 各自的 scope 属性</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo.[[scope]] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  globalContext.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VO</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 全局上下文的变量对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bar.[[scope]] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fooContext.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foo 函数上下文的变量对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  globalContext.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VO</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 全局上下文的变量对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ul><li>当函数激活后，进入函数上下文，创建 <code>VO/AO</code> 后，就会将活动对象添加到作用链的前端 <ul><li>这时候执行上下文的作用域链，我们命名为<code>Scope</code>，<code>Scope = [AO].concat([[Scope]])</code></li></ul></li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 转换后</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fooStack </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  VO: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    arguments: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      length: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scopeChain: [globalContext.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  this: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">barStack </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  VO: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    arguments: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      length: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scopeChain: [fooStack.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, globalContext.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  this: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h4 id="_3-确定-this-指向" tabindex="-1">（3）确定 this 指向 <a class="header-anchor" href="#_3-确定-this-指向" aria-label="Permalink to &quot;（3）确定 this 指向&quot;">​</a></h4><ul><li><strong>this</strong>的指向根据不同的环境场景指向都不同</li></ul><h4 id="_4-分析" tabindex="-1">（4）分析 <a class="header-anchor" href="#_4-分析" aria-label="Permalink to &quot;（4）分析&quot;">​</a></h4><ul><li>执行上下文的代码会分成两个阶段进行处理：分析和执行，我们也可以叫做： <ul><li>进入执行上下文</li><li>代码执行，这个过程具体是在下一步执行函数代码中去实现的</li></ul></li><li>进入执行上下文，或者称为分析阶段、解释阶段注：这个时候还没有执行代码，只是解析阶段 <ul><li>变量对象包括 <ul><li><strong>函数的所有形参</strong>（如果是函数上下文） <ul><li>由名称和对应值组成的一个变量对象的属性被创建</li><li>没有实参，属性值设为 <code>undefined</code></li></ul></li><li><strong>函数声明</strong><ul><li>由名称和对应值（函数对象<code>function-object</code>）组成一个变量对象的属性被创建</li><li>如果变量对象已经存在相同名称的属性，则<strong>完全替换</strong>这个属性</li></ul></li><li><strong>变量声明</strong><ul><li>由名称和对应值<code>undefined</code>组成一个变量对象的属性被创建</li><li>如果变量名称跟已经声明的形式参数或函数<strong>相同</strong>，则变量声明<strong>不会干扰</strong>已经存在的这类属性</li></ul></li></ul></li></ul></li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ------------------</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在进入执行上下文后，这时候的 AO 是：</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  arguments: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    length: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  c: reference to </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	d: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><ul><li>代码执行 <ul><li>在代码执行阶段，会顺序执行代码，并根据代码修改活动对象（变量对象）的值</li></ul></li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上面的代码执行后，AO是：</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  arguments: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    length: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  c: reference to </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	d: reference to FunctionExpression </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;d&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>总结： <ol><li>全局上下文的变量对象初始化是**全局对象</li><li>函数上下文的变量对象初始化只包括 <code>Arguments</code> 对象</li><li>在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值</li><li>在代码执行阶段，会再次修改变量对象的属性值</li></ol></li></ul><h3 id="_04-创建执行上下文-新版" tabindex="-1">04. 创建执行上下文（新版） <a class="header-anchor" href="#_04-创建执行上下文-新版" aria-label="Permalink to &quot;04. 创建执行上下文（新版）&quot;">​</a></h3><ul><li><strong>ES5 规范</strong>中的执行上下文： <ul><li>确定<code>this</code>指向<code>This Binding</code></li><li>创建<strong>词法环境</strong><code>Lexical Environment</code></li><li>创建<strong>变量环境</strong><code>Variable Environment</code></li></ul></li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ExecutionContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ThisBinding </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">this</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   // 词法环境</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   LexicalEnvironment = { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   // 变量环境</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   VariableEnvironment = { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_1-确定this指向" tabindex="-1">（1）确定<code>this</code>指向 <a class="header-anchor" href="#_1-确定this指向" aria-label="Permalink to &quot;（1）确定\`this\`指向&quot;">​</a></h4><ul><li>用<code>This Binding</code>表示<code>this</code>的指向，在创建执行上下文时不能确认，只有在执行的时候才能确认</li><li>在全局执行上下文中，<code>this</code>指向全局对象，浏览器的<code>this</code>指向<code>window</code>，<code>nodejs</code>指向<code>module</code>对象</li><li>在函数执行上下文中，<code>this</code>的值取决于函数的调用方式</li></ul><h4 id="_2-创建词法环境" tabindex="-1">（2）创建词法环境 <a class="header-anchor" href="#_2-创建词法环境" aria-label="Permalink to &quot;（2）创建词法环境&quot;">​</a></h4><ul><li><p><strong>词法环境</strong>是，一个用于定义<strong>标识符</strong>和<strong>变量映射</strong>的结构，一个<strong>标识符——变量</strong>的映射表这个概念可类比原来的<strong>变量对象</strong></p><ul><li>这个标识符就是：变量名或者函数名</li><li>这个变量映射就是：实际对象或者原始值的引用，也就是<strong>具体的值</strong></li></ul></li><li><p>词法环境由以下两个部分<strong>组成</strong></p><ul><li><strong>环境记录器</strong><code>EnvironmentRecord</code>：用于存放变量声明和函数声明</li><li><strong>外部环境的引用</strong><code>Outer</code>：可以访问的父级词法环境 <ul><li>这个<code>Outer</code>就是作用域链的关键了</li></ul></li></ul></li><li><p>词法环境的<strong>类型</strong>：</p><ul><li><strong>环境记录器</strong><code>EnvironmentRecord</code>：用于存放变量声明和函数声明</li><li><strong>外部环境的引用</strong><code>Outer</code>：可以访问的父级词法环境 <ul><li>这个<code>Outer</code>就是作用域链的关键了</li></ul></li></ul></li><li><p>环境记录器（ER）的两种类型<code>Type</code></p><ul><li><strong>declarative</strong>：函数声明、变量声明</li><li><strong>object</strong>：由<code>with</code>语句触发，另，全局 ER 也是<code>object</code></li></ul></li><li><p>其它</p><ul><li>词法环境只会存储，函数声明，和<code>let | const</code>声明的变量</li><li><code>let | const</code>变量在初始化时会被设置为<code>&lt;uninitialized&gt;</code><ul><li>在赋值之前读取这个变量会报<code>ReferenceError</code>的错误</li><li>这个特性又叫做暂时性死区</li></ul></li></ul></li></ul><h4 id="_3-创建变量环境" tabindex="-1">（3）创建变量环境 <a class="header-anchor" href="#_3-创建变量环境" aria-label="Permalink to &quot;（3）创建变量环境&quot;">​</a></h4><ul><li><strong>变量环境</strong>与<strong>词法环境</strong>相似，区别在于，<strong>变量环境</strong>是用来存储<code>var</code>变量声明 <ul><li>这是因为<code>var</code>变量会进行声明提升，而<code>let | const</code>声明的变量不会，所以这里用不同的环境去区分</li><li>变量环境在本质上仍是词法环境，但它只用于存放<code>var</code>声明的变量，这样，在初始化时就可以赋值为<code>undefined</code></li></ul></li></ul><h4 id="_4-分析-1" tabindex="-1">（4）分析 <a class="header-anchor" href="#_4-分析-1" aria-label="Permalink to &quot;（4）分析&quot;">​</a></h4><ul><li>创建执行上下文</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 全局环境</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GlobalExectionContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  	ThisBinding: &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Global</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    // 词法环境</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LexicalEnvironment: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        EnvironmentRecord: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 存放 let\\const 变量声明 和 函数声明</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            b: &lt; </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uninitialized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            c: &lt; </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uninitialized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            foo: &lt; </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        outer: &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    // 变量环境</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    VariableEnvironment: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        EnvironmentRecord: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 存储并直接定义 var 变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        outer: &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 函数环境</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FunctionExectionContext = {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  	ThisBinding: &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Global</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    // 词法环境</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LexicalEnvironment: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 环境记录器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        EnvironmentRecord: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Declarative&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      		Arguments: {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, length: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 外部环境的引用，指向全局环境或包含该函数的外部函数环境</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    	outer: &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GlobalLexicalEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    // 变量环境</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    VariableEnvironment: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    	EnvironmentRecord: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      		Type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Declarative&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      		// 存储并直接定义 var 变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      		d: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    	},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    	outer: &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GlobalLexicalEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><h3 id="_05-执行函数代码" tabindex="-1">05. 执行函数代码 <a class="header-anchor" href="#_05-执行函数代码" aria-label="Permalink to &quot;05. 执行函数代码&quot;">​</a></h3><h4 id="_1-基本流程" tabindex="-1">（1）基本流程 <a class="header-anchor" href="#_1-基本流程" aria-label="Permalink to &quot;（1）基本流程&quot;">​</a></h4><ul><li><p>当 JS 代码开始执行时，首先会遇到<strong>全局代码</strong></p><ul><li>所以会先创建一个<strong>全局执行上下文</strong><code>globalContext</code></li><li>并将其压入全局之下上下文栈<code>ECStack</code>中</li></ul></li><li><p>每当 JS 引擎遇到一个函数调用</p><ul><li>就会为该函数创建一个<strong>函数执行上下文</strong><code>functionContext</code></li></ul></li><li><p>并压入<code>ECStack</code>的栈顶</p></li><li><p>当函数执行完毕，才会将这个<code>functionContext</code>从<code>ECStack</code>中移除<code>pop</code></p></li><li><p><code>JS</code>引擎会始终执行栈顶的执行上下文的代码</p></li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fun2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fun2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fun1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fun2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fun1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">## 伪代码</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 创建一个 执行栈</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ECStack </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 遇到全局代码，创建一个全局执行上下文</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ECStack.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(globalContext)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. 遇到函数调用 fun1() , 创建一个 fun1 的执行上下文</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ECStack.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">fun1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; functionContext)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 4. 遇到函数调用 fun2() ，创建一个 fun2 的执行上下文</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ECStack.push(&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">fun2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; functionContext)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 5. fun2 执行完毕，将 fun2 的执行上下文弹出</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ECStack.pop()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 5. fun1 执行完毕</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ECStack.pop()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 6. 所有代码执行完毕</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ECStack.pop()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="_06-垃圾回收" tabindex="-1">06. 垃圾回收 <a class="header-anchor" href="#_06-垃圾回收" aria-label="Permalink to &quot;06. 垃圾回收&quot;">​</a></h3><h4 id="_1-基本概念" tabindex="-1">（1）基本概念 <a class="header-anchor" href="#_1-基本概念" aria-label="Permalink to &quot;（1）基本概念&quot;">​</a></h4><ul><li><p>垃圾回收，即<code>GC</code>（<code>Garbage Collection</code>）</p><ul><li>程序工作过程中会产生很多垃圾，这些垃圾是程序<strong>不用的内存</strong>或者是<strong>之前用过了，以后不会再用的内存空间</strong></li><li>而 <code>GC</code> 就是负责回收垃圾的，他工作在引擎内部，所以对于我们前端来说，<code>GC</code> 过程是相对比较无感的</li><li>这一套引擎执行而对我们又相对无感的操作也就是常说的<strong>垃圾回收机制</strong></li><li><strong>就是将那些不用的内存清除的机制</strong>，是由 JS 引擎自己执行的</li></ul></li><li><p>在我们写代码时，每创建一个基本类型、对象、函数等，这些都是需要占用内存的</p><ul><li>这些内存是由引擎为我们分配的，我们不需要显式手动的去分配内存</li><li>而对于不用的内存空间，我们必须将其释放，否则内存占用越来越高，会导致进程崩溃</li></ul></li><li><p>垃圾回收策略</p><ul><li>即，如何发现这些不可达的对象（垃圾）它并给予清理的问题</li><li><code>JavaScript</code> 垃圾回收机制的原理就是：<strong>定期</strong>找出那些不再用到的内存（变量），然后释放其内存 <ul><li>实时开销太大了</li></ul></li></ul></li><li><p>一般来说常见的两种方式</p><ul><li><strong>标记清除算法</strong></li><li><strong>引用计数算法</strong></li></ul></li></ul><h4 id="_2-标记清除算法" tabindex="-1">（2）标记清除算法 <a class="header-anchor" href="#_2-标记清除算法" aria-label="Permalink to &quot;（2）标记清除算法&quot;">​</a></h4><ul><li>概念： <ul><li>标记阶段即<strong>为所有活动对象做上标记</strong>，清除阶段则把没有标记（也就是非活动对象）销毁</li></ul></li><li>缺点： <ul><li><strong>内存碎片化</strong>，空闲内存块是不连续的，容易出现很多空闲内存块，还可能会出现分配所需内存过大的对象时找不到合适的块</li><li><strong>分配速度慢</strong></li></ul></li><li>解决： <ul><li>使用 <strong>标记整理（</strong><code>Mark-Compact</code>**）算法 **</li><li>在标记结束后，标记整理算法会将活着的对象（即不需要清理的对象）向内存的一端移动，最后清理掉边界的内存</li></ul></li></ul><h4 id="_3-引用计数算法" tabindex="-1">（3）引用计数算法 <a class="header-anchor" href="#_3-引用计数算法" aria-label="Permalink to &quot;（3）引用计数算法&quot;">​</a></h4><ul><li>概念： <ul><li>它把<strong>对象是否不再需要</strong>简化定义为<strong>对象有没有其他对象引用到它</strong></li><li>如果没有引用指向该对象（引用计数为 0），对象将被垃圾回收机制回收</li></ul></li><li>缺点： <ul><li>需要一个计数器，所占内存空间大，因为我们也不知道被引用数量的上限</li><li>无法解决循环引用导致的无法回收问题</li></ul></li></ul><h4 id="_4-v8-对-gc-的优化" tabindex="-1">（4）V8 对 GC 的优化 <a class="header-anchor" href="#_4-v8-对-gc-的优化" aria-label="Permalink to &quot;（4）V8 对 GC 的优化&quot;">​</a></h4><ul><li>分代式垃圾回收</li><li>并行回收</li><li>并发回收</li></ul>`,55),e=[p];function t(h,r,k,E,c,d){return n(),i("div",null,e)}const u=s(l,[["render",t]]);export{g as __pageData,u as default};
