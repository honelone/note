import{_ as t,D as p,c as h,j as i,a as s,I as l,w as n,a3 as e,o as k}from"./chunks/framework.BkEKdGEG.js";const r="/note/assets/%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A.CIPNuHQ1.webp",ns=JSON.parse('{"title":"几个面试题","description":"","frontmatter":{"created":"2023-08-28T00:00:00.000Z","updated":"2023-08-28T00:00:00.000Z"},"headers":[],"relativePath":"vue2/19.几个面试题.md","filePath":"vue2/19.几个面试题.md","lastUpdated":1716610678000}'),d={name:"vue2/19.几个面试题.md"},o=e('<h1 id="几个面试题" tabindex="-1">几个面试题 <a class="header-anchor" href="#几个面试题" aria-label="Permalink to &quot;几个面试题&quot;">​</a></h1><hr><h2 id="一、vue-框架" tabindex="-1">一、Vue 框架 <a class="header-anchor" href="#一、vue-框架" aria-label="Permalink to &quot;一、Vue 框架&quot;">​</a></h2><h3 id="_01-vue-框架的优点" tabindex="-1">01. Vue 框架的优点？ <a class="header-anchor" href="#_01-vue-框架的优点" aria-label="Permalink to &quot;01. Vue 框架的优点？&quot;">​</a></h3><ul><li>优点： <ul><li>性能好，容易优化</li><li>体积小</li><li>低耦合</li><li>可重用</li><li>独立开发</li><li>可测试</li></ul></li><li>核心 <ul><li>数据驱动：ViewModel，保证数据和视图的一致性</li><li>组件系统：应用类 UI 可以看作全部是由组件树构成的</li></ul></li></ul><h3 id="_02-渐进式框架是什么" tabindex="-1">02. 渐进式框架是什么？ <a class="header-anchor" href="#_02-渐进式框架是什么" aria-label="Permalink to &quot;02. 渐进式框架是什么？&quot;">​</a></h3><ul><li>渐进式框架是：</li></ul><h3 id="_03-spa-单⻚面的优缺点是什么" tabindex="-1">03. SPA 单⻚⾯的优缺点是什么？ <a class="header-anchor" href="#_03-spa-单⻚面的优缺点是什么" aria-label="Permalink to &quot;03. SPA 单⻚⾯的优缺点是什么？&quot;">​</a></h3><ul><li>概念：SPA 即 <code>single-page application</code> ，仅在⻚⾯初始化时加载相应的 HTML、JavaScript 和 CSS <ul><li>⼀旦⻚⾯加载完成，SPA 不会因为⽤户的操作⽽进⾏⻚⾯的重新加载或跳转</li><li>取⽽代之的是利⽤<strong>路由机制</strong>实现 HTML 内容的变换，UI 与⽤户的交互，避免⻚⾯的重新加载</li></ul></li><li>优点： <ul><li>1）⽤户体验好、快，内容的改变不需要重新加载整个⻚⾯，避免了不必要的跳转和重复渲染</li><li>2）SPA 相对服务器压⼒⼩</li><li>3）前后端职责分离，架构清晰，前端进⾏交互逻辑，后端负责数据处理</li></ul></li><li>缺点： <ul><li>1）⾸屏（初次）加载慢：为实现单⻚ Web 应⽤功能及显示效果，需要在加载⻚⾯的时候将 JavaScript、CSS 统⼀加载，部分⻚⾯按需加载</li><li>2）不利于 SEO：由于所有的内容都在⼀个⻚⾯中动态替换显示，所以在 SEO 上其有着天然的弱势</li></ul></li></ul><h3 id="_04-spa-首屏加载慢如何解决" tabindex="-1">04. SPA 首屏加载慢如何解决 <a class="header-anchor" href="#_04-spa-首屏加载慢如何解决" aria-label="Permalink to &quot;04. SPA 首屏加载慢如何解决&quot;">​</a></h3><ul><li>安装动态懒加载所需插件</li><li>使用 CDN 资源</li></ul><h3 id="_05-vue-ssr-是什么" tabindex="-1">05. Vue SSR 是什么？ <a class="header-anchor" href="#_05-vue-ssr-是什么" aria-label="Permalink to &quot;05. Vue SSR 是什么？&quot;">​</a></h3><ul><li><p>SSR，即服务端渲染</p></li><li><p>SSR 大致的意思就是</p><ul><li>vue 在客户端将标签渲染成的整个 html 片段的工作在服务端完成</li><li>服务端形成的 html 片段直接返回给客户端</li><li>这个过程就叫做服务端渲染</li></ul></li><li><p>优点</p><ul><li><u>更好的 SEO</u><ul><li>SPA 页面的内容是通过 Ajax 获取，而搜索引擎爬取工具并不会等待 Ajax 异步完成后再抓取页面内容，所以在 SPA 中是抓取不到页面通过 Ajax 获取到的内容</li><li>而 SSR 是直接由服务端返回已经渲染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取渲染好的页面</li></ul></li><li><u>首屏加载更快</u><ul><li>SPA 会等待所有 Vue 编译后的 js 文件都下载完成后，才开始进行页面的渲染，文件下载等需要一定的时间等，所以首屏渲染需要一定的时间</li><li>SSR 直接由服务端渲染好页面直接返回显示，无需等待下载 js 文件及再去渲染等，所以 SSR 有更快的内容到达时间；</li></ul></li></ul></li><li><p>缺点</p><ul><li>更多的开发条件限制 <ul><li>例如服务端渲染只支持 beforCreate 和 created 两个钩子函数</li><li>服务端渲染应用程序，需要处于 Node.js server 运行环境</li></ul></li><li>更多的服务器负载 <ul><li>大量占用 CPU 资源</li></ul></li></ul></li></ul><h3 id="_06-对-vue-的优化" tabindex="-1">06. 对 Vue 的优化？ <a class="header-anchor" href="#_06-对-vue-的优化" aria-label="Permalink to &quot;06. 对 Vue 的优化？&quot;">​</a></h3><ul><li><p>代码层面的优化</p><ul><li>v-if 和 v-show 区分使用场景</li><li>computed 和 watch 区分使用场景</li><li>v-for 遍历必须为 item 添加 key，且避免同时使用 v-if</li><li>长列表性能优化</li><li>事件的销毁</li><li>图片资源懒加载</li><li>路由懒加载</li><li>第三方插件的按需引入</li><li>优化无限列表性能</li><li>服务端渲染 SSR or 预渲染</li></ul></li><li><p>Webpack 层面的优化</p><ul><li>Webpack 对<strong>图片进行压缩</strong></li><li>减少 ES6 转为 ES5 的冗余代码</li><li>提取公共代码</li><li>模板预编译</li><li>提取组件的 CSS</li><li>优化 SourceMap</li><li>构建结果输出分析</li><li>Vue 项目的编译优化</li></ul></li><li><p>基础的 Web 技术的优化</p><ul><li>开启 <strong>gzip 压缩</strong></li><li>浏览器缓存</li><li><strong>CDN 的使用</strong></li><li>使用 Chrome Performance 查找性能瓶颈</li></ul></li></ul><hr><h2 id="二、关于原理" tabindex="-1">二、关于原理 <a class="header-anchor" href="#二、关于原理" aria-label="Permalink to &quot;二、关于原理&quot;">​</a></h2><h3 id="_01-mvvm框架是什么" tabindex="-1">01. <strong>MVVM</strong>框架是什么？ <a class="header-anchor" href="#_01-mvvm框架是什么" aria-label="Permalink to &quot;01. **MVVM**框架是什么？&quot;">​</a></h3><ul><li><p>概念：MVVM 框架，即<code>Model-View-ViewModel</code></p><ul><li><code>Model</code> 层： <ul><li>即数据模型层，泛指后端进行的各种业务逻辑处理和数据操控</li><li>对于前端来说就是后端提供的 api 接口</li></ul></li><li><code>View</code> 层： <ul><li>即视图层，也就是用户界面</li><li>前端主要由 HTML 和 CSS 来构建</li></ul></li><li><code>ViewModel</code>层： <ul><li>ViewModel 是由前端开发人员组织生成和维护的视图数据层</li></ul></li></ul></li><li><p>作用：主要用于<strong>实现双向数据绑定</strong></p><ul><li>当数据一旦改变，就会相应的刷新对应的视图层 UI</li><li>当视图层发生变化，也会改变对应的数据</li><li>这样，在业务处理中就可以只关心数据，不需要关心 View 如何处理数据</li></ul></li></ul><h3 id="_02-vue-双向数据绑定" tabindex="-1">02. Vue 双向数据绑定？ <a class="header-anchor" href="#_02-vue-双向数据绑定" aria-label="Permalink to &quot;02. Vue 双向数据绑定？&quot;">​</a></h3><ul><li>Vue 的双向数据绑定主要是指：<strong>数据变化更新视图，视图变化更新数据</strong></li></ul>',21),E=i("u",null,"如何根据 Data 变化更新 View",-1),c=i("ul",null,[i("li",null,[s("其核心是：通过"),i("code",null,"Object.defineProperty()"),s("，劫持各个属性的"),i("code",null,"set"),s("和"),i("code",null,"get"),s("事件")])],-1),u=i("p",null,"Vue 主要通过以下 4 个步骤来实现数据双向绑定的：",-1),g=e("<li>（1）<strong>实现一个监听器 <code>Observer</code></strong><ul><li>对数据对象进行遍历，包括子属性对象的属性，利用 <code>Object.defineProperty()</code> 给属性都加上<code> setter()</code>和 <code>getter()</code></li><li>这样的话，给这个对象的某个值赋值，就会触发 <code>setter</code>，那么就能监听到数据变化</li></ul></li><li>（2）<strong>实现一个解析器 <code>Compile</code></strong><ul><li>解析 Vue 模板指令，将模板中的变量都替换成数据</li><li>然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数</li><li>添加监听数据的订阅者，一旦数据有变动，收到通知，<strong>调用更新函数进行数据更</strong>新</li></ul></li>",2),y=i("strong",null,[s("实现一个订阅者 "),i("code",null,"Watcher")],-1),b=i("code",null,"Watcher",-1),m=i("li",null,[s("当收到属性值变化的消息时，会"),i("u",null,"触发解析器 Compile 中对应的更新函数")],-1),F=i("li",null,[s("（4）"),i("strong",null,[s("实现一个订阅器 "),i("code",null,"Dep")]),i("ul",null,[i("li",null,[s("订阅器采用 "),i("strong",null,"发布-订阅"),s(" 设计模式")]),i("li",null,"用来收集订阅者 Watcher，对监听器 Observer 和 订阅者 Watcher 进行统一管理")])],-1),v=i("img",{src:r},null,-1),D=e(`<li><p>这里有一个简单的双向绑定代码，供大家参考</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;show&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/javascript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newValue;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;show&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newValue;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;keyup&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    obj.txt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.target.value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></li>`,1),C=e(`<h3 id="_03-单向数据流怎么理解" tabindex="-1">03. 单向数据流怎么理解？ <a class="header-anchor" href="#_03-单向数据流怎么理解" aria-label="Permalink to &quot;03. 单向数据流怎么理解？&quot;">​</a></h3><ul><li>父级 <code>prop</code> 的更新会向下流动到子组件中，但是反过来则不行 <ul><li>这样可以防止子组件意外改变父组件的状态，从而导致应用的数据流向难以理解</li></ul></li></ul><h3 id="_04-vue3-的-proxy" tabindex="-1">04. Vue3 的 Proxy？ <a class="header-anchor" href="#_04-vue3-的-proxy" aria-label="Permalink to &quot;04. Vue3 的 Proxy？&quot;">​</a></h3><ul><li><code>Proxy </code>的优势如下: <ul><li>Proxy 可以直接监听对象和数组的变化</li><li>Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的</li><li>Proxy 返回的是一个新对象，我们可以只操作新的对象达到目的，而 Object.defineProperty 只能遍历对象属性直接修改</li><li>Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；</li></ul></li><li><code>Object.defineProperty </code>的优势如下: <ul><li>兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本( 3.0 )才能用 Proxy 重写。</li></ul></li></ul><h3 id="_05-虚拟-dom-的优缺点" tabindex="-1">05. 虚拟 DOM 的优缺点？ <a class="header-anchor" href="#_05-虚拟-dom-的优缺点" aria-label="Permalink to &quot;05. 虚拟 DOM 的优缺点？&quot;">​</a></h3><ul><li>虚拟 DOM：<code>virtual-dom</code><ul><li>是一个普通的 JavaScript 对象，用来描述真实的 DOM，是对真实 DOM 的抽象</li></ul></li><li>优点： <ul><li>可以提升性能</li><li>不需要手动操作 DOM</li><li>可以维护视图和状态的关系</li><li>可以跨平台开发</li></ul></li><li>缺点： <ul><li>虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化</li></ul></li></ul><h3 id="_06-虚拟-dom-实现原理" tabindex="-1">06. 虚拟 DOM 实现原理 <a class="header-anchor" href="#_06-虚拟-dom-实现原理" aria-label="Permalink to &quot;06. 虚拟 DOM 实现原理&quot;">​</a></h3><ul><li>虚拟 DOM 的实现原理主要包括以下 3 部分： <ul><li>用 JavaScript 对象模拟真实 DOM 树，对真实 DOM 进行抽象</li><li>diff 算法 — 比较两棵虚拟 DOM 树的差异 <ul><li>只比较同一层级，不跨级比较</li><li>tag 不相同，则直接删除重建，不再深度比较</li><li>tag 和 key，两者都相同，则认为是相同节点 <ul><li>然后比较属性，以及子节点</li></ul></li></ul></li><li>pach 算法 — 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树</li></ul></li></ul><hr><h2 id="三、关于-vue" tabindex="-1">三、关于 Vue <a class="header-anchor" href="#三、关于-vue" aria-label="Permalink to &quot;三、关于 Vue&quot;">​</a></h2><h3 id="_01-【vue-loader】的作用是什么" tabindex="-1">01. 【vue-loader】的作用是什么？ <a class="header-anchor" href="#_01-【vue-loader】的作用是什么" aria-label="Permalink to &quot;01. 【vue-loader】的作用是什么？&quot;">​</a></h3><ul><li><p>作用：一个基于 Webpack 的 loader，可以解析和转换<code>.vue</code>文件</p><ul><li>提取<code>template</code>、<code>script</code>、<code>style</code>标签中代码，并分别把他们交给对应的 loader 处理，转换为 JS 模块</li></ul></li></ul><h3 id="_02-【vue-use】是什么" tabindex="-1">02. 【Vue.use】是什么？ <a class="header-anchor" href="#_02-【vue-use】是什么" aria-label="Permalink to &quot;02. 【Vue.use】是什么？&quot;">​</a></h3><ul><li><p><code>vue.use</code> 是用来使用插件的，我们可以在插件中扩展全局组件、指令、原型方法等</p></li><li><p><code>Vue.js</code> 的插件应该暴露一个 <code>install</code> 方法。这个方法的第一个参数是 <code>Vue</code> 构造器，第二个参数是一个可选的选项对象，用于传入插件的配置</p><blockquote><p>在使用<code>Vue.use()</code>的时候，就会调用插件内部的<code>install</code>方法</p><ul><li>插件传入的如果是一个对象，则执行其<code>install</code>方法</li><li>如果是一个函数，则执行它自身，并<code>bind</code> <code>this</code>为<code>null</code>，然后传入额外的参数</li></ul></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyPlugin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1. 添加全局方法或属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">myGlobalMethod</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 逻辑...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2. 添加全局资源</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-directive&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">vnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">oldVnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 逻辑...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 3. 注入组件选项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mixin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 逻辑...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 4. 添加实例方法</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$myMethod</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">methodOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 逻辑...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 5. 注册全局组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myButton&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...组件选项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// --------------</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyPlugin, {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div></li></ul><h3 id="_03-vue-的两个核心点" tabindex="-1">03. Vue 的两个核心点 <a class="header-anchor" href="#_03-vue-的两个核心点" aria-label="Permalink to &quot;03. Vue 的两个核心点&quot;">​</a></h3><ul><li>数据驱动、组件系统 <ul><li>数据驱动：<code>ViewModel</code>，保证数据和视图的一致性</li><li>组件系统：应用类 UI 可以看作全部是由组件树构成的</li></ul></li></ul><h3 id="_04-vue-的生命周期" tabindex="-1">04. vue 的生命周期 <a class="header-anchor" href="#_04-vue-的生命周期" aria-label="Permalink to &quot;04. vue 的生命周期&quot;">​</a></h3><ul><li><p>概念：每个 Vue 实例在被创建时都要经过一系列的初始化过程</p></li><li><p>作用：</p><table><thead><tr><th>生命周期</th><th>描述</th></tr></thead><tbody><tr><td>beforeCreate</td><td>组件实例被创建之初，组件的属性生效之前</td></tr><tr><td>created</td><td>组件实例已经完全创建，属性也绑定，但真实 dom 还没有生成，$el 还不可用</td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用：相关的 render 函数首次被调用</td></tr><tr><td>mounted</td><td>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子</td></tr><tr><td>beforeUpdate</td><td>组件数据更新之前调用，发生在虚拟 DOM 打补丁之前</td></tr><tr><td>update</td><td>组件数据更新之后</td></tr><tr><td>activited</td><td>keep-alive 专属，组件被激活时调用</td></tr><tr><td>deactivated</td><td>keep-alive 专属，组件被销毁时调用</td></tr><tr><td>beforeDestory</td><td>组件销毁前调用</td></tr><tr><td>destoryed</td><td>组件销毁后调用</td></tr></tbody></table></li></ul><h3 id="_05-第一次页面加载会触发" tabindex="-1">05. 第一次页面加载会触发： <a class="header-anchor" href="#_05-第一次页面加载会触发" aria-label="Permalink to &quot;05. 第一次页面加载会触发：&quot;">​</a></h3><ul><li><code>beforeCreate</code>、<code>created</code>、<code>beforeMount</code>、<code>mounted</code></li></ul><h3 id="_06-created-和-mounted-的区别" tabindex="-1">06. created 和 mounted 的区别 <a class="header-anchor" href="#_06-created-和-mounted-的区别" aria-label="Permalink to &quot;06. created 和 mounted 的区别&quot;">​</a></h3><ul><li><code>created</code>：在模板渲染成 html 前调用，即通常初始化某些属性值，然后再渲染成视图</li><li><code>mounted</code>：在模板渲染成 html 后调用，通常是初始化页面完成后，再对 html 的 dom 节点进行一些需要的操作</li></ul><h3 id="_07-获取数据在哪个周期函数" tabindex="-1">07. 获取数据在哪个周期函数? <a class="header-anchor" href="#_07-获取数据在哪个周期函数" aria-label="Permalink to &quot;07. 获取数据在哪个周期函数?&quot;">​</a></h3><ul><li>可以在钩子函数 <code>created</code>、<code>beforeMount</code>、<code>mounted</code> 中进行调用 <ul><li>因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值</li></ul></li><li>但一般都在 <strong><code>created</code> 钩子函数</strong>中调用异步请求</li></ul><h3 id="_08-在什么阶段可以访问操作-dom" tabindex="-1">08. 在什么阶段可以访问操作 DOM？ <a class="header-anchor" href="#_08-在什么阶段可以访问操作-dom" aria-label="Permalink to &quot;08. 在什么阶段可以访问操作 DOM？&quot;">​</a></h3><ul><li>在钩子函数 mounted 被调用前，Vue 已经将编译好的模板挂载到页面上，所以在 <code>mounted</code> 中可以访问操作 DOM</li><li>但是也可以通过<code>$nextTick()</code>的回调函数来操作访问 DOM</li></ul><h3 id="_09-父子组件生命周期执行顺序" tabindex="-1">09. 父子组件生命周期执行顺序？ <a class="header-anchor" href="#_09-父子组件生命周期执行顺序" aria-label="Permalink to &quot;09. 父子组件生命周期执行顺序？&quot;">​</a></h3>`,27),A=i("u",null,"渲染",-1),_=i("u",null,"子组件更新",-1),q=i("u",null,"父组件更新",-1),f=i("u",null,"销毁",-1),B=e(`<h3 id="_10-父组件监听子组件的生命周期" tabindex="-1">10. 父组件监听子组件的生命周期？ <a class="header-anchor" href="#_10-父组件监听子组件的生命周期" aria-label="Permalink to &quot;10. 父组件监听子组件的生命周期？&quot;">​</a></h3><ul><li><p>可以在子组件的对应生命周期内，通过<code>$emit</code>向父组件<u>派发事件</u>，然后父组件<u>监听这个事件</u></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Parent.vue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Child</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> @mounted=&quot;doSomething&quot;/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Child.vue</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">mounted()</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mounted&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>可以直接在父组件引用子组件时通过 <code>@hook</code> 来监听</p><ul><li>子组件不需要做任何处理</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Parent.vue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Child</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> @hook:mounted=&quot;doSomething&quot;/&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><hr><h2 id="四、关于-data" tabindex="-1">四、关于 Data <a class="header-anchor" href="#四、关于-data" aria-label="Permalink to &quot;四、关于 Data&quot;">​</a></h2><h3 id="_01-如何重置-vue-中的-data" tabindex="-1">01. 如何重置 Vue 中的 data？ <a class="header-anchor" href="#_01-如何重置-vue-中的-data" aria-label="Permalink to &quot;01. 如何重置 Vue 中的 data？&quot;">​</a></h3><ul><li><p>使用：<code>Object.assign(newObj, oldObj)</code></p><ul><li><code>this.$data</code>：获取<strong>当前状态</strong>下的 data</li><li><code>this.$options.data()</code>：获取该组件<strong>初始状态</strong>下的 data</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$data, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$options.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果只是重置某一个属性</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$options.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().id;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h3 id="_02-组件中的-data-为什么是函数" tabindex="-1">02. 组件中的 data 为什么是函数？ <a class="header-anchor" href="#_02-组件中的-data-为什么是函数" aria-label="Permalink to &quot;02. 组件中的 data 为什么是函数？&quot;">​</a></h3><ul><li>这是由于 JavaScript 的特性所导致的</li><li>在组件中，<code>data</code>必须以函数的形式存在，不可以是对象 <ul><li>以<strong>函数返回值</strong>的形式定义，每次<strong>复用组件</strong>的时候，都会返回一份<strong>新的 data</strong></li><li>而以<strong>对象形式</strong>定义，所有的组件实例将<strong>共用一个 data</strong>，因为对象是<strong>引用类型</strong></li></ul></li><li>因此，为了保证组件不同的实例之间的数据不冲突，<code>data</code>必须是一个<strong>函数</strong></li></ul><h3 id="_03-在-vue-实例上挂载属性-方法" tabindex="-1">03. 在 Vue 实例上挂载属性/方法？ <a class="header-anchor" href="#_03-在-vue-实例上挂载属性-方法" aria-label="Permalink to &quot;03. 在 Vue 实例上挂载属性/方法？&quot;">​</a></h3><ul><li><p>在<strong>Vue 的原型上</strong>添加一个属性/方法，这样可以在任意实例上读取</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$xx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xx;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h3 id="_04-class-与-style-动态绑定" tabindex="-1">04. class 与 style 动态绑定？ <a class="header-anchor" href="#_04-class-与-style-动态绑定" aria-label="Permalink to &quot;04. class 与 style 动态绑定？&quot;">​</a></h3><ul><li><p>Class 可以通过对象语法和数组语法进行动态绑定：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 对象形式：在对象{}里面的，是具体的class属性值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-bind:class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ active: isActive, &#39;text-danger&#39;: hasError }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      isActive: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      hasError: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 数组形式：在数组[]里面的是一个data属性，这个data属性等于一个class属性值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-bind:class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[isActive ? activeClass : &#39;&#39;, errorClass]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      activeClass: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;active&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      errorClass: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text-danger&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></li><li><p>Style 也可以通过对象语法和数组语法进行动态绑定</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 对象形式：对象{}里面的与原生style写法类似，只需要注意使用驼峰命名的属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-bind:style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ color: activeColor, fontSize: fontSize + &#39;px&#39; }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      activeColor: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;red&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      fontSize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 数组形式：在数组[]里面的是data属性，这个data属性是一个对象，对象内部是具体的样式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-bind:style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[styleColor, styleSize]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      styleColor: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        color: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;red&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      styleSize: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fontSize: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;23px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div></li></ul><blockquote><p>注意：</p><ul><li>如果动态绑定的样式或属性过多，可直接在 data 中定义，或使用计算属性的形式</li></ul></blockquote><h3 id="_05-computed-和-watch-的区别" tabindex="-1">05. computed 和 watch 的区别？ <a class="header-anchor" href="#_05-computed-和-watch-的区别" aria-label="Permalink to &quot;05. computed 和 watch 的区别？&quot;">​</a></h3><ul><li><code>computed</code>:（计算属性） <ul><li>当一个属性<strong>受多个属性影响</strong>的时候就需要用到 computed</li><li>只有它依赖的属性值发生改变，它才会重新计算</li><li>适用场景：进行数值计算时</li></ul></li><li><code>watch</code>:（监听器） <ul><li>当一条数据<strong>影响多条数据</strong>的时候就需要用 watch</li><li>适用场景：进行数据变化时的操作、执行异步操作</li></ul></li></ul><h3 id="_06-数组、对象的响应式" tabindex="-1">06. 数组、对象的响应式？ <a class="header-anchor" href="#_06-数组、对象的响应式" aria-label="Permalink to &quot;06. 数组、对象的响应式？&quot;">​</a></h3><ul><li><p>由于 JavaScript 的限制，Vue 无法监测到以下变化</p><ul><li>直接修改对象的某个属性值：<code>obj.a = 2</code></li><li>直接修改数组项：<code>arr[1] = 1</code></li><li>直接修改数组长度：<code>arr.length = 3</code></li></ul></li><li><p>解决方法：</p><ul><li><p>对于对象：</p><ul><li>直接覆盖整个对象：<code>obj = newObj</code></li><li>使用<code>set</code>方法：<code>Vue.set(obj, key, newValue)</code></li></ul></li><li><p>对于数组：</p><ul><li><p>使用数组方法：<code>pop</code>、<code>push</code>、<code>unshift</code>、<code>shift</code>、<code>splice</code></p></li><li><p>使用<code>set</code>方法：<code>Vue.set(arr, index, newValue)</code></p></li></ul></li></ul></li></ul><h3 id="_07-如何进行对象数组的监听" tabindex="-1">07. 如何进行对象数组的监听？ <a class="header-anchor" href="#_07-如何进行对象数组的监听" aria-label="Permalink to &quot;07. 如何进行对象数组的监听？&quot;">​</a></h3><ul><li><p>分析：</p><ul><li><code>Object.defineProperty()</code>在对数据进行劫持时，只能对<strong>属性</strong>进行数据劫持</li><li>不能对<strong>整个对象</strong>进行劫持，同理无法对<strong>数组</strong>进行劫持</li></ul><blockquote><p>因此，Vue 框架是通过<strong>遍历数组</strong>和<strong>递归遍历对象</strong></p><p>从而达到利用 <code>Object.defineProperty()</code> 也能监听对象和数组（部分方法的操作）</p></blockquote></li><li><p>实现原理：</p><ul><li>如果目标是数组 <ul><li>直接使用数组的 <code>splice</code> 方法触发响应式</li></ul></li><li>如果目标是对象 <ul><li>会先判读属性是否存在、对象是否是响应式</li><li>最后，如果要对属性进行响应式处理，则是通过调用 <code>defineReactive</code> 方法进行响应式处理 <ul><li><code>defineReactive</code> 方法就是 Vue 在初始化对象时，给对象属性采用 <code>Object.defineProperty</code> 动态添加 getter 和 setter 的功能所调用的方法</li></ul></li></ul></li></ul></li><li><p>具体实现：</p><ul><li>在 Vue 中，使用<code>watch</code>监听器进行监听</li><li>而对于数组、对象，需要添加<code>deep:true</code>属性，进行深度监听</li></ul></li></ul><hr><h2 id="五、关于组件" tabindex="-1">五、关于组件 <a class="header-anchor" href="#五、关于组件" aria-label="Permalink to &quot;五、关于组件&quot;">​</a></h2><h3 id="_01-组件通信的方式" tabindex="-1">01. 组件通信的方式？ <a class="header-anchor" href="#_01-组件通信的方式" aria-label="Permalink to &quot;01. 组件通信的方式？&quot;">​</a></h3><ul><li><p>通过<code>props / $emit</code></p></li><li><p>通过<code>ref</code>引用</p></li><li><p>通过<code>$parent / $children</code></p></li><li><p>通过<code>EventBus</code>事件总线</p><ul><li><code>$emit / $on</code></li></ul></li><li><p>通过<code>$props / $attrs / $listeners</code></p><ul><li>多级组件通信</li></ul></li><li><p>通过<code>provide / inject</code></p><ul><li>隔代组件通信</li></ul></li><li><p>通过<code>Vuex</code>状态管理</p></li></ul><h3 id="_02-【keep-alive】的作用是什么" tabindex="-1">02. 【keep-alive】的作用是什么? <a class="header-anchor" href="#_02-【keep-alive】的作用是什么" aria-label="Permalink to &quot;02. 【keep-alive】的作用是什么?&quot;">​</a></h3><ul><li><code>keep-alive</code> 是 Vue 内置的一个组件，可以使被包含的组件<strong>保留状态、进入缓存，避免重新渲染</strong></li></ul><h3 id="_03-让-css-只在当前组件中起作用" tabindex="-1">03. 让 CSS 只在当前组件中起作用？ <a class="header-anchor" href="#_03-让-css-只在当前组件中起作用" aria-label="Permalink to &quot;03. 让 CSS 只在当前组件中起作用？&quot;">​</a></h3><ul><li>在组件中的<code>&lt;style&gt;</code>内部加上<code>scoped</code>属性</li></ul><h3 id="_04-如何获取-dom" tabindex="-1">04. 如何获取 dom? <a class="header-anchor" href="#_04-如何获取-dom" aria-label="Permalink to &quot;04. 如何获取 dom?&quot;">​</a></h3><ul><li>在对应的 DOM 元素上添加<code>ref</code>属性：<code>ref=&quot;refName&quot;</code><ul><li>用法：<code>this.$refs.refName</code></li></ul></li></ul><h3 id="_05-【-nexttick】的使用" tabindex="-1">05. 【$nextTick】的使用？ <a class="header-anchor" href="#_05-【-nexttick】的使用" aria-label="Permalink to &quot;05. 【$nextTick】的使用？&quot;">​</a></h3>`,30),x=i("strong",null,"不能立即获取到更新后的值",-1),P=i("p",null,[s("需要使用"),i("code",null,"$nextTick"),s("这个回调，让修改后的 data 值"),i("strong",null,"渲染更新到 dom 元素"),s("之后再获取，才能成功")],-1),V=i("code",null,"$nextTick",-1),S=i("li",null,[s("在"),i("strong",null,"修改数据之后"),s("使用这个方法，可以"),i("strong",null,"立即获取更新后的 DOM 元素")],-1),w=e(`<div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 在这里可以立即获取更新后的 属性值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,1),j=e(`<h3 id="_06-组件插槽" tabindex="-1">06. 组件插槽 <a class="header-anchor" href="#_06-组件插槽" aria-label="Permalink to &quot;06. 组件插槽&quot;">​</a></h3><ul><li><p>匿名插槽：当子组件的插槽<code>&lt;slot&gt;</code>没有<code>name</code>属性，或者<code>name</code>属性为<code>default</code>时，即为匿名插槽</p></li><li><p>具名插槽：需要使用<code>&lt;slot&gt;</code>中的 <code>name</code>属性来绑定元素</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 没有命名的插槽内容将会显示在这个地方 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">slot</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 设置了名字的插槽则会显示在对应插槽名下 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 使用：v-slot 或者 # 简写 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 匿名插槽用 default 做参数 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-slot:default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;默认插槽，会显示在没有命名的插槽中&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 具名插槽用 插槽名做参数 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> #content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  会显示在对应插槽名下的插槽中 如果没有匹配的插槽名，则会显示在默认插槽中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><blockquote><p>注：</p><ul><li>使用<code>slot=&quot;xxx&quot;</code>的形式，可以在任意元素标签上</li><li>使用<code>v-slot:xxx</code>的形式，<u>只能定义在<code>template</code>元素上</u></li></ul></blockquote></li><li><p>动态插槽：通过一个动态的属性来指定插槽名</p></li><li><p>作用域插槽：带数据的插槽、带参数的插槽，是子组件提供给父组件的参数，该参数仅限于该插槽中使用</p></li></ul><h3 id="_07-监听组件生命周期" tabindex="-1">07. 监听组件生命周期 <a class="header-anchor" href="#_07-监听组件生命周期" aria-label="Permalink to &quot;07. 监听组件生命周期&quot;">​</a></h3>`,3),M=e(`<li><p>比如有父组件<code>Parent</code>和子组件<code>Child</code>，如果父组件监听到子组件挂载<code>mounted</code>就做一些逻辑处理，常规的写法可能如下：</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// Parent.vue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">doSomething</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// Child.vue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mounted&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li>`,1),$=i("code",null,"@hook",-1),O=e('<div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">Child</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @hook:mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;doSomething&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>',1),R=i("li",null,[i("p",null,[s("当然这里不仅仅是可以监听"),i("code",null,"mounted"),s("，其它的生命周期事件，例如："),i("code",null,"created"),s("，"),i("code",null,"updated"),s("等都可以")])],-1),L=e(`<h3 id="_08-动态组件" tabindex="-1">08. 动态组件 <a class="header-anchor" href="#_08-动态组件" aria-label="Permalink to &quot;08. 动态组件&quot;">​</a></h3><ul><li><p>Vue 提供了一个方法来实现动态组件，也称为<strong>元组件</strong></p><ul><li>即：将组件动态绑定到 <code>is</code> 特性上，依靠<code>is</code>的值来决定哪一个组件被渲染</li></ul><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">component_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 动态组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        component_name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;component1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// component2、component3...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li></ul><h3 id="_09-如何在子组件更新父组件的值" tabindex="-1">09. 如何在子组件更新父组件的值？ <a class="header-anchor" href="#_09-如何在子组件更新父组件的值" aria-label="Permalink to &quot;09. 如何在子组件更新父组件的值？&quot;">​</a></h3><ul><li>第一种方式：<code>props / $emit</code></li><li>第二种方式：传递引用类型的数据</li><li>第三种方式：通过<code>.sync</code>修饰符</li></ul><h3 id="_10-重新渲染组件" tabindex="-1">10. 重新渲染组件 <a class="header-anchor" href="#_10-重新渲染组件" aria-label="Permalink to &quot;10. 重新渲染组件&quot;">​</a></h3><ul><li>通过<code>v-if</code>的切换来销毁和重建 DOM 节点</li><li>通过<code>key</code>值的改变，来重新渲染 DOM</li><li>通过<code>this.$forceUpdate()</code>强制执行更新</li></ul><hr><h2 id="六、关于路由" tabindex="-1">六、关于路由 <a class="header-anchor" href="#六、关于路由" aria-label="Permalink to &quot;六、关于路由&quot;">​</a></h2><h3 id="_01-【vue-router】-是什么" tabindex="-1">01. 【vue-router】 是什么? <a class="header-anchor" href="#_01-【vue-router】-是什么" aria-label="Permalink to &quot;01. 【vue-router】 是什么?&quot;">​</a></h3><ul><li><code>Vue-router</code>：即 SPA（单页应用）的路径管理器</li><li>路由模块的本质：就是<strong>建立起<code>url</code>和组件之间的一一映射关系</strong></li></ul><h3 id="_02-【active-class】-是哪个组件的属性" tabindex="-1">02. 【active-class】 是哪个组件的属性？ <a class="header-anchor" href="#_02-【active-class】-是哪个组件的属性" aria-label="Permalink to &quot;02. 【active-class】 是哪个组件的属性？&quot;">​</a></h3><ul><li><code>vue-router</code>模块的包括两个组件： <ul><li><code>router-link</code>组件</li><li><code>router-view</code>组件</li></ul></li><li><code>active-class</code>属于<code>router-link</code>组件的属性</li></ul><h3 id="_03-在【router-link】注册事件无效" tabindex="-1">03. 在【router-link】注册事件无效？ <a class="header-anchor" href="#_03-在【router-link】注册事件无效" aria-label="Permalink to &quot;03. 在【router-link】注册事件无效？&quot;">​</a></h3><ul><li>使用<code>@click.native</code><ul><li>原因：<code>router-link</code>会阻止 click 事件</li><li>添加<code>.native</code>可以直接监听一个原生事件</li></ul></li></ul><h3 id="_04-如何定义动态路由" tabindex="-1">04. 如何定义动态路由？ <a class="header-anchor" href="#_04-如何定义动态路由" aria-label="Permalink to &quot;04. 如何定义动态路由？&quot;">​</a></h3><ul><li><p>当需要经常把某种模式匹配到所有的路由，全部都映射到<strong>同一个组件</strong>时，可以通过配置动态路由来实现</p></li><li><p>动态路由匹配：在路由路径中使用<strong>动态路径参数</strong>进行匹配，其本质就是利用<code>url</code>传递参数</p></li></ul><h3 id="_05-vue-router-有哪几种导航钩子" tabindex="-1">05. vue-router 有哪几种导航钩子? <a class="header-anchor" href="#_05-vue-router-有哪几种导航钩子" aria-label="Permalink to &quot;05. vue-router 有哪几种导航钩子?&quot;">​</a></h3>`,17),U=e("<li>全局守卫 <ul><li>全局前置守卫：<code>router.beforeEach</code></li><li>全局解析守卫：<code>router.beforeResolve</code></li><li>全局后置钩子：<code>router.afterEach</code></li></ul></li><li>路由独享守卫 <ul><li>为某个路由对象单独配置的守卫：<code>beforeEnter</code></li></ul></li>",2),T=i("code",null,"beforeRouteEnter",-1),H=i("code",null,"this",-1),N=i("li",null,[s("但可以通过给"),i("code",null,"next()"),s("方法传递一个回调来访问组件实例")],-1),I=i("li",null,[i("code",null,"beforeRouteUpdate"),s("：在路由改变，但又复用同一个组件时调用 "),i("ul",null,[i("li",null,[s("如：从"),i("code",null,"/user1"),s("跳转到"),i("code",null,"user/2")])])],-1),J=i("li",null,[i("code",null,"beforeRouteLeave"),s("：在离开当前路由时调用")],-1),W=e(`<hr><h3 id="_06-路由守卫可以接收什么参数" tabindex="-1">06. 路由守卫可以接收什么参数？ <a class="header-anchor" href="#_06-路由守卫可以接收什么参数" aria-label="Permalink to &quot;06. 路由守卫可以接收什么参数？&quot;">​</a></h3><ul><li><p>每个守卫方法可有接收三个参数</p><ul><li><p><code>to</code>：即将前往的目标路由对象</p></li><li><p><code>from</code>：当前正要离开的路由对象</p></li><li><p><code>next</code>：一个方法，导航守卫的执行效果依赖于这个方法的调用参数</p><ul><li><p><code>next()</code>：表示放行，可以前往目标路由</p></li><li><p><code>next(false)</code>：表示中断当前导航</p></li><li><p><code>next(&#39;/&#39;)</code>：表示中断当前导航，并跳转到一个新的路由</p><ul><li>这里内部参数设置同路由跳转时设置的参数设一致</li></ul></li><li><p><code>next(error)</code>：表示终止导航，并传递一个<code>Error</code>实例</p><ul><li>这个错误实例将被<code>router.onError()</code>注册的回调接收</li></ul></li></ul></li></ul></li></ul><h3 id="_07-如何监听路由变化" tabindex="-1">07. 如何监听路由变化？ <a class="header-anchor" href="#_07-如何监听路由变化" aria-label="Permalink to &quot;07. 如何监听路由变化？&quot;">​</a></h3><ul><li><p><strong>参数或查询的改变，并不会触发进入（离开）的导航守卫</strong></p><ul><li>但可以通过监听 <code>$route</code> 对象来应对这些变化，或使用 <code>beforeRouteUpdate</code> 的组件内守卫</li></ul></li><li><p>通过 watch 监听路由变化</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  watch: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    $route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><h3 id="_08-【-route】-和-【-router】的区别" tabindex="-1">08. 【$route】 和 【$router】的区别 <a class="header-anchor" href="#_08-【-route】-和-【-router】的区别" aria-label="Permalink to &quot;08. 【$route】 和 【$router】的区别&quot;">​</a></h3><ul><li><p><code>$route</code>是获取<strong>路由信息</strong>的一个对象</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$route.params; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取 params对象参数,没有路由参数则为 空对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> query </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$route.query; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取 query对象参数，没有则为 空对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$route.name; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取 当前路由的 名称</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$route.hash; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取 当前路由的 hash值，包括 # ，没有则为空字符串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$route.path; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取 当前路由对象的路径---绝对路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fullPath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$route.fullPath; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取 当前路由的完整URL，包含查询参数和hash的完整路径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matched </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$route.matched; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取 当前路由下 路由声明的所有信息、记录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redirectedForm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$route.refirectedForm; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取 当前路由重定向的来源路由（如果有重定向）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li><li><p><code>$router</code>是进行<strong>路由跳转</strong>的路由实例对象</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    toRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 跳转路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        params: {}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// params参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        query: {}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// query参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      });</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 替换当前路由</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 前进、后退</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li></ul><h3 id="_09-页面传参" tabindex="-1">09. 页面传参 <a class="header-anchor" href="#_09-页面传参" aria-label="Permalink to &quot;09. 页面传参&quot;">​</a></h3><ul><li><p>URL 传参</p><ul><li><p><code>params</code><strong>显式传参</strong>时</p><ul><li>需要在路由配置中的<code>path</code>后面添加参数名</li><li>且参数会成为路由的一部分：<code>/child/123</code></li><li>页面刷新时，不会丢失参数</li></ul></li><li><p><code>params</code><strong>隐式传参</strong>时</p><ul><li>需要用<code>name</code>属性匹配参数</li><li>参数不会显示到路径上，且页面刷新时会<strong>清空参数</strong></li></ul></li><li><p>用<code>query</code>传参时</p><ul><li>可以用<code>path</code>属性和<code>name</code>属性来匹配路由</li><li><code>query</code>参数会正常显示在 URL 地址栏上：<code>/child?id=123</code></li><li>页面刷新时<strong>不会清空参数</strong></li></ul><hr></li><li><p>同时设置<code>params</code>和<code>query</code>对象参数时</p><ul><li>如果用<code>name</code>进行匹配，两个对象参数都可以传递</li><li>如果用<code>path</code>进行匹配，只能传递<code>query</code>参数</li><li>如果用<code>name</code>和<code>path</code>进行匹配，将以<code>name</code>优先 <ul><li>即两个对象参数都可以传递</li></ul></li></ul></li></ul></li><li><p>Props 传参</p><ul><li>布尔类型</li><li>对象类型</li><li>函数类型</li></ul></li></ul><h3 id="_10-vue-router-的路由模式有几种" tabindex="-1">10. vue-router 的路由模式有几种 <a class="header-anchor" href="#_10-vue-router-的路由模式有几种" aria-label="Permalink to &quot;10. vue-router 的路由模式有几种&quot;">​</a></h3><ul><li><p><code>hash</code>模式：使用 URL hash 值来作路由</p></li><li><p><code>history</code>模式：依赖 HTML5 History API 和服务器配置</p></li><li><p><code>abstract</code>模式：支持所有 JavaScript 运行环境，如 Node.js 服务器端</p><ul><li>如果发现没有浏览器的 API，路由会自动强制进入这个模式</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (mode) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;history&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.history </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTML5History</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options.base);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hash&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.history </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HashHistory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options.base, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.fallback);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;abstract&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.history </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbstractHistory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options.base);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`invalid mode: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li></ul><h3 id="_11-路由模式实现原理" tabindex="-1">11. 路由模式实现原理？ <a class="header-anchor" href="#_11-路由模式实现原理" aria-label="Permalink to &quot;11. 路由模式实现原理？&quot;">​</a></h3><ul><li><p><strong>hash 路由模式</strong>的实现主要是基于下面几个特性：</p><ul><li>使用 URL 的 hash 来模拟一个完整的 URL，当 URL 改变时，页面不会重新加载</li><li>URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送</li><li>hash 值的改变，都会在浏览器的访问历史中增加一个记录 <ul><li>因此我们能通过浏览器的回退、前进按钮控制 hash 的切换</li></ul></li><li>可以通过 a 标签，并设置 href 属性，当用户点击这个标签后，URL 的 hash 值会发生改变 <ul><li>或者使用 JavaScript 来对 <code>loaction.hash</code> 进行赋值，改变 URL 的 hash 值</li></ul></li><li>我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）</li></ul><blockquote><p>回顾一下：</p><p>在学习 HTML 的时候，我们知道<code>&lt;a&gt;</code>标签可以创建锚点，并且可以跳转</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 定义锚点 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#bottom&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;top&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;点击跳转到底部&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height:3000px;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 定义跳转链接 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#top&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bottom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;点击跳转到顶部&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在浏览器里点击跳转链接时</p><p>我们可以看到地址栏里的<u>基本路径没有变化</u></p><p>但在路径之后增加了<code>#top</code>、<code>#bottom</code></p><p>页面滚动到了对应的锚点处</p></blockquote></li><li><p><strong>history 路由模式</strong>的实现主要基于存在下面几个特性：</p><ul><li><code>pushState</code> 和 <code>repalceState</code> 两个 API 来操作实现 URL 的变化</li><li>我们可以使用 <code>popstate</code> 事件来监听 url 的变化，从而对页面进行跳转（渲染）</li><li><code>history.pushState()</code> 或 <code>history.replaceState()</code> 不会触发 <code>popstate</code> 事件，这时我们需要手动触发页面跳转（渲染）</li></ul></li></ul><h3 id="_12-如何实现路由懒加载" tabindex="-1">12. 如何实现路由懒加载？ <a class="header-anchor" href="#_12-如何实现路由懒加载" aria-label="Permalink to &quot;12. 如何实现路由懒加载？&quot;">​</a></h3><ul><li><p>第一种：箭头函数+import，按需导入</p></li><li><p>第二种：箭头函数+require，</p></li><li><p>第三种：使用<code>webpack</code>提供的<code>require.ensure()</code>技术</p><ul><li>对多个路由指定相同的<code>chunkName</code>，会合并打包成一个 js 文件</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// r就是resolve</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> require.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ensure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([], () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@/components/list&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;list&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 路由也是正常的写法  这种是官方推荐的写的 按模块划分懒加载</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Router</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    routes: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/list&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            component: List,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;list&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li></ul><h3 id="_13-vue-中-hash-模式和-history-模式的区别" tabindex="-1">13. Vue 中 hash 模式和 history 模式的区别 <a class="header-anchor" href="#_13-vue-中-hash-模式和-history-模式的区别" aria-label="Permalink to &quot;13. Vue 中 hash 模式和 history 模式的区别&quot;">​</a></h3><ul><li><p>最明显的是在显示上，<code>hash</code>模式的<code>URL</code>中会夹杂着<code>#</code>号，而<code>history</code>没有</p></li><li><p><code>Vue</code>底层对它们的实现方式不同</p><ul><li><code>hash</code>模式是依靠<code>onhashchange</code>事件(监听<code>location.hash</code>的改变)</li><li>而<code>history</code>模式是主要是依靠的<code>HTML5 history</code>中新增的两个方法 <ul><li><code>pushState()</code>可以改变<code>url</code>地址且不会发送请求</li><li><code>replaceState()</code>可以读取历史记录栈,还可以对浏览器记录进行修改。</li></ul></li></ul></li><li><p>当真正需要通过<code>URL</code>向后端发送<code>HTTP</code>请求的时候，比如常见的用户手动输入<code>URL</code>后回车，或者是刷新(重启)浏览器，这时候<code>history</code>模式需要后端的支持</p><ul><li>因为<code>history</code>模式下，前端的<code>URL</code>必须和实际向后端发送请求的<code>URL</code>一致</li><li>例如有一个<code>URL</code>是带有路径<code>path</code>的(例如<code>www.lindaidai.wang/blogs/id</code>)，如果后端没有对这个路径做处理的话，就会返回<code>404</code>错误</li><li>所以需要后端增加一个覆盖所有情况的候选资源，一般会配合前端给出的一个<code>404</code>页面。</li></ul></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onhashchange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // location.hash获取到的是包括#号的，如&quot;#heading-3&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 所以可以截取一下</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> location.hash.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><hr><h2 id="七、关于-vuex" tabindex="-1">七、关于 Vuex <a class="header-anchor" href="#七、关于-vuex" aria-label="Permalink to &quot;七、关于 Vuex&quot;">​</a></h2><h3 id="_01-vuex-是什么" tabindex="-1">01. vuex 是什么？ <a class="header-anchor" href="#_01-vuex-是什么" aria-label="Permalink to &quot;01. vuex 是什么？&quot;">​</a></h3><ul><li><p>Vuex 是一个用于 Vue 的状态管理器</p></li><li><p>使用 Vuex 的优点：</p><ul><li><p>方便开发和后期维护，可以集中管理数据</p></li><li><p>高效实现组件通信，提高开发效率</p></li><li><p>可以响应式的更新数据</p></li></ul></li></ul><h3 id="_02-vuex-有哪几种属性" tabindex="-1">02. vuex 有哪几种属性？ <a class="header-anchor" href="#_02-vuex-有哪几种属性" aria-label="Permalink to &quot;02. vuex 有哪几种属性？&quot;">​</a></h3><ul><li>分别是 State、 Getter、Mutation 、Action、 Module</li><li><code>state</code>：用于存放数据状态，作用同 data</li><li><code>getters</code>：从基本数据派生出来的数据，作用同计算属性 computed</li><li><code>mutations</code>：是唯一更改 store 中状态的方法，且必须是同步函数</li><li><code>actions</code>：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作</li><li><code>modules</code>：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中</li></ul><h3 id="_03-ajax-请求写在哪里" tabindex="-1">03. Ajax 请求写在哪里？ <a class="header-anchor" href="#_03-ajax-请求写在哪里" aria-label="Permalink to &quot;03. Ajax 请求写在哪里？&quot;">​</a></h3><ul><li><code>Ajax</code>请求代码应该写在<code>methods</code>中还是 vuex 的<code>actions</code>中？ <ul><li>如果请求的数据<strong>不会</strong>被其他组件<strong>公用</strong>，而仅在请求的组件内使用，就不需要放入<code>action</code>里</li><li>如果需要复用，就放入<code>action</code>里，方便其它组件使用 <ul><li>包装成<code>promise</code>返回，在调用处通过<code>async/await</code>处理返回的数据</li></ul></li></ul></li></ul><h3 id="_04-vuex-刷新页面数据丢失" tabindex="-1">04. Vuex 刷新页面数据丢失？ <a class="header-anchor" href="#_04-vuex-刷新页面数据丢失" aria-label="Permalink to &quot;04. Vuex 刷新页面数据丢失？&quot;">​</a></h3><ul><li><p><code>Vuex</code> 的数据是保存在<strong>运行内存中</strong>的，当页面刷新时，页面会重新加载 Vue 实例，这个时候<code>Vuex</code>中的数据就会被重新赋值</p></li><li><p>解决办法：</p><ul><li>（1）可以将数据保存在<strong>浏览器缓存中</strong>。如：<code>sessionStorage</code>、<code>localStorage</code></li><li>（2）可以在页面刷新时，<strong>再次请求远程数据</strong>，动态更新 Vuex 数据</li></ul></li></ul><hr><h2 id="八、-待续-关于-axios" tabindex="-1">八、（待续）关于 Axios <a class="header-anchor" href="#八、-待续-关于-axios" aria-label="Permalink to &quot;八、（待续）关于 Axios&quot;">​</a></h2><h3 id="_01-axios-的特点有哪些" tabindex="-1">01. axios 的特点有哪些 <a class="header-anchor" href="#_01-axios-的特点有哪些" aria-label="Permalink to &quot;01. axios 的特点有哪些&quot;">​</a></h3><ul><li>从浏览器中创建 XMLHttpRequests；</li><li>node.js 创建 http 请求；</li><li>支持 Promise API；</li><li>拦截请求和响应；</li><li>转换请求数据和响应数据；</li><li>取消请求；</li><li>自动换成 json。</li><li>axios 中的发送字段的参数是 data 跟 params 两个，两者的区别在于 params 是跟请求地址一起发送的，data 的作为一个请求体进行发送</li><li>params 一般适用于 get 请求，data 一般适用于 post put 请求。</li></ul><hr><h2 id="九、关于指令" tabindex="-1">九、关于指令 <a class="header-anchor" href="#九、关于指令" aria-label="Permalink to &quot;九、关于指令&quot;">​</a></h2><h3 id="_01-v-show-与-v-if-的区别" tabindex="-1">01. v-show 与 v-if 的区别？ <a class="header-anchor" href="#_01-v-show-与-v-if-的区别" aria-label="Permalink to &quot;01. v-show 与 v-if 的区别？&quot;">​</a></h3>`,35),z=i("code",null,"v-if",-1),G=e("<li><code>v-show</code> 不管初始条件是什么都会渲染，并且只是简单地基于 CSS 的 <code>display</code> 属性进行切换</li><li><code>v-show</code> 只是 CSS 级别的 <code>display: none;</code> 和 <code>display: block;</code> 之间的切换</li><li>总结： <ul><li><code>v-if</code> 适用于不需要频繁切换条件的场景（一次性渲染完的） <ul><li>在组件上使用可触发组件的生命周期</li></ul></li><li><code>v-show</code> 则适用于需要非常频繁切换条件的场景 <ul><li>不可用于组件</li></ul></li></ul></li>",3),Z=e(`<h3 id="_02-v-for-与-v-if-的使用" tabindex="-1">02. v-for 与 v-if 的使用？ <a class="header-anchor" href="#_02-v-for-与-v-if-的使用" aria-label="Permalink to &quot;02. v-for 与 v-if 的使用？&quot;">​</a></h3><ul><li>1、<code>v-for</code>优先于<code>v-if</code>被解析</li><li>2、如果同时出现，每次渲染都会先执行循环再判断条件，无论如何循环都不可避免，浪费了性能</li><li>3、要避免出现这种情况，则在外层嵌套<code>&lt;template&gt;</code>，在这一层进行<code>v-if</code>判断，然后在内部进行<code>v-for</code>循环</li><li>4、如果条件出现在循环内部，可通过<strong>计算属性</strong>提前过滤掉那些不需要显示的项</li></ul><h3 id="_03-v-for-中的key的作用" tabindex="-1">03. v-for 中的<strong>key</strong>的作用？ <a class="header-anchor" href="#_03-v-for-中的key的作用" aria-label="Permalink to &quot;03. v-for 中的**key**的作用？&quot;">​</a></h3><ul><li><p>为什么使用<code>key</code>？</p><ul><li>主要是为了<strong>高效的更新虚拟 DOM</strong></li><li>使用<code>key</code>来给每个元素节点添加一个<strong>唯一标识</strong></li><li>可以方便<code>Vue</code>更好的<strong>区别</strong>各个组件，<strong>Diff 算法</strong>就可以<strong>正确的识别</strong>此节点</li></ul><blockquote><p>使用<code>v-for</code>更新已渲染的元素列表时，默认用<code>就地复用</code>策略</p><ul><li>当列表数据修改的时候，他会根据<code>key</code>值去判断某个值是否修改</li><li>如果修改，则重新渲染这一项</li><li>否则复用之前的元素</li></ul></blockquote></li><li><p>尽量<strong>不使用 index</strong>作为 key：</p><ul><li>这是由于<code>index</code>永远都是顺序排序的</li><li>如果在数据中间插入一条数据，会导致后续数据的<code>index</code>值全部改变</li><li>那么就会导致后面的所有数据都重新渲染一次</li></ul></li></ul><h3 id="_04-v-on-可以监听多个方法吗" tabindex="-1">04. v-on 可以监听多个方法吗？ <a class="header-anchor" href="#_04-v-on-可以监听多个方法吗" aria-label="Permalink to &quot;04. v-on 可以监听多个方法吗？&quot;">​</a></h3><ul><li><p>可以，使用对象的形式</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ input:onInput, focus:onFocus, blur:onBlur, }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h3 id="_05-vue-常用的修饰符" tabindex="-1">05. vue 常用的修饰符 <a class="header-anchor" href="#_05-vue-常用的修饰符" aria-label="Permalink to &quot;05. vue 常用的修饰符&quot;">​</a></h3><ul><li><code>.stop</code>：等同于 JavaScript 中的<code>event.stopPropagation()</code>，防止事件冒泡</li><li><code>.prevent</code>：等同于 JavaScript 中的<code>event.preventDefault()</code>，防止执行预设的行为（如果事件可取消，则取消该事件，而不停止事件的进一步传播）</li><li><code>.capture</code>：与事件冒泡的方向相反，事件捕获由外到内</li><li><code>.self</code>：只会触发自己范围内的事件，不包含子元素</li><li><code>.once</code>：只会触发一次</li></ul><h3 id="_06-vue-初始化页面闪动问题" tabindex="-1">06. vue 初始化页面闪动问题 <a class="header-anchor" href="#_06-vue-初始化页面闪动问题" aria-label="Permalink to &quot;06. vue 初始化页面闪动问题&quot;">​</a></h3><ul><li><p>首先：在 css 里加上</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">v-cloak</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>然后，在页面元素加上属性：<code>v-cloak</code></p></li></ul><h3 id="_07-v-model-的原理" tabindex="-1">07. v-model 的原理？ <a class="header-anchor" href="#_07-v-model-的原理" aria-label="Permalink to &quot;07. v-model 的原理？&quot;">​</a></h3><ul><li><p><code>v-model</code>指令主要用于，在表单元素上（ input、textarea、select）创建双向数据绑定</p></li><li><p>其实质是<code>v-bind</code>和<code>v-on</code>的语法糖：</p><ul><li><p>通过<code>v-bind</code>绑定<code>value</code>属性</p></li><li><p>通过<code>v-on</code>处理数据，实现双向绑定</p></li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;something&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 等价于</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;something&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;something = $event.target.value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;checked&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;radio&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 等价于</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;checked&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @change</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;checked = $event.target.value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><hr><ul><li><p>如果在自定义组件中，则组件会默认拆解为 <code>props: value</code> 和 <code>events: input</code></p><ul><li><p>但对其它元素来说，不一定要监听<code>input</code>事件，也不一定是<code>value</code>属性</p><ul><li>所以，可以在子组件内部，通过<code>model</code>来对<code>v-model</code>进行自定义</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 父组件 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">son</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;checked&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">son</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 子组件 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;checkbox&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 还是需要通过 props 接收父组件传递的参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      props: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;checked&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 然后通过 model 来自定义属性和事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      model: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          prop: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;checked&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 表示 绑定的属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          event: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;change&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 表示 监听 change 自定义事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></li></ul></li></ul><hr>`,15);function K(Q,X,Y,ss,is,as){const a=p("font");return k(),h("div",null,[o,i("blockquote",null,[i("p",null,[s("其中，View 变化更新 Data ，可以通过"),i("u",null,[l(a,{color:"red"},{default:n(()=>[s("事件监听")]),_:1})]),s("的方式来实现")]),i("p",null,[s("所以 Vue 的数据双向绑定的工作主要是："),l(a,{color:"blue"},{default:n(()=>[E]),_:1})])]),i("ul",null,[i("li",null,[i("p",null,[s("vue 的双向数据绑定是"),i("u",null,[s("通过"),l(a,{color:"blue"},{default:n(()=>[s("数据劫持")]),_:1}),s("、结合 "),l(a,{color:"red"},{default:n(()=>[s("发布订阅模式")]),_:1}),s("的方式来实现的")])]),c]),i("li",null,[u,i("ul",null,[g,i("li",null,[s("（3）"),y,i("ul",null,[i("li",null,[b,s(" 订阅者是 Observer 和 Compile 之间"),l(a,{color:"red"},{default:n(()=>[s("通信的桥梁 ")]),_:1})]),i("li",null,[s("主要任务是："),l(a,{color:"blue"},{default:n(()=>[s("订阅")]),_:1}),s(" Observer 中的属性值"),l(a,{color:"blue"},{default:n(()=>[s("变化")]),_:1}),s("的消息")]),m])]),F]),v]),D]),C,i("ul",null,[i("li",null,[s("加载"),A,s("过程："),l(a,{color:"red"},{default:n(()=>[s("父 beforeCreate")]),_:1}),s(" -> "),l(a,{color:"red"},{default:n(()=>[s("父 created")]),_:1}),s(" -> "),l(a,{color:"red"},{default:n(()=>[s("父 beforeMount")]),_:1}),s(" -> "),l(a,{color:"blue"},{default:n(()=>[s("子 beforeCreate")]),_:1}),s(" -> "),l(a,{color:"blue"},{default:n(()=>[s("子 created")]),_:1}),s(" -> "),l(a,{color:"blue"},{default:n(()=>[s("子 beforeMount")]),_:1}),s(" -> "),l(a,{color:"blue"},{default:n(()=>[s("子 mounted")]),_:1}),s(" -> "),l(a,{color:"red"},{default:n(()=>[s("父 mounted")]),_:1})]),i("li",null,[_,s("过程："),l(a,{color:"red"},{default:n(()=>[s("父 beforeUpdate")]),_:1}),s(" -> "),l(a,{color:"blue"},{default:n(()=>[s("子 beforeUpdate")]),_:1}),s(" -> "),l(a,{color:"blue"},{default:n(()=>[s("子 updated")]),_:1}),s(" -> "),l(a,{color:"red"},{default:n(()=>[s("父 updated")]),_:1})]),i("li",null,[q,s("过程："),l(a,{color:"red"},{default:n(()=>[s("父 beforeUpdate ")]),_:1}),s("-> "),l(a,{color:"red"},{default:n(()=>[s("父 updated")]),_:1})]),i("li",null,[f,s("过程："),l(a,{color:"red"},{default:n(()=>[s("父 beforeDestroy")]),_:1}),s(" -> "),l(a,{color:"blue"},{default:n(()=>[s("子 beforeDestroy")]),_:1}),s(" -> "),l(a,{color:"blue"},{default:n(()=>[s("子 destroyed")]),_:1}),s(" -> "),l(a,{color:"red"},{default:n(()=>[s("父 destroyed")]),_:1})])]),B,i("ul",null,[i("li",null,[i("p",null,[s("在 Vue 中，并不是数据发生变化之后，DOM 立即发生变化，当修改了 data 的值，然后马上获取这个 dom 元素的值，是"),l(a,{color:"red"},{default:n(()=>[x]),_:1})])]),i("li",null,[P,i("ul",null,[i("li",null,[V,s("表示："),l(a,{style:{color:"blue"}},{default:n(()=>[s("在下次 DOM 更新循环结束之后执行")]),_:1})]),S]),w])]),j,i("ul",null,[M,i("li",null,[i("p",null,[s("还有一种特别简单的方式，"),l(a,{color:"blue"},{default:n(()=>[s("子组件不需要任何处理")]),_:1}),s("，只需要在父组件引用的时候通过"),$,s("来监听即可，代码重写如下：")]),O]),R]),L,i("ul",null,[U,i("li",null,[s("组件内守卫 "),i("ul",null,[i("li",null,[T,s("：在进入路由前、组件实例创建之前调用 "),i("ul",null,[i("li",null,[s("在这个阶段"),l(a,{color:"red"},{default:n(()=>[s("不能获取组件实例"),H]),_:1})]),N])]),I,J])])]),W,i("ul",null,[i("li",null,[z,s(" 是真正的条件渲染，直到条件第一次变为真时，才会开始渲染（懒加载） "),i("ul",null,[i("li",null,[s("v-if 指令是"),l(a,{color:"red"},{default:n(()=>[s("直接销毁和重建")]),_:1}),s("DOM 节点，达到让元素显示和隐藏的效果")])])]),G]),Z])}const es=t(d,[["render",K]]);export{ns as __pageData,es as default};
