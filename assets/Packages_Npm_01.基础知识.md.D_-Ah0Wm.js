import{_ as s,c as i,o as a,a1 as n}from"./chunks/framework.yskgK-vV.js";const e="/note/assets/npm%E5%AE%89%E8%A3%85.DVsbozfz.png",g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Packages/Npm/01.基础知识.md","filePath":"Packages/Npm/01.基础知识.md"}'),l={name:"Packages/Npm/01.基础知识.md"},p=n(`<blockquote><p><code>pnpm</code>还需要再看看</p></blockquote><h2 id="前端包管理工具" tabindex="-1">前端包管理工具 <a class="header-anchor" href="#前端包管理工具" aria-label="Permalink to &quot;前端包管理工具&quot;">​</a></h2><h3 id="_01-基本概念" tabindex="-1">01. 基本概念 <a class="header-anchor" href="#_01-基本概念" aria-label="Permalink to &quot;01. 基本概念&quot;">​</a></h3><ul><li><p>概念：<code>npm</code>：<code>Node Package Manager</code>，即<code>Node</code>包管理器，通常也用于管理依赖包</p></li><li><p>下载与安装：<code>npm</code>属于<code>node</code>的一个管理工具，所以需要先安装<code>Node</code>，安装之后会自动安装<code>npm</code>工具</p></li><li><p><code>npm</code>包的存放位置：发布的包会发布到<code>registry</code>上面，安装包时也是从<code>registry</code>上面下载包</p></li></ul><h3 id="_02-配置文件package-json" tabindex="-1">02. 配置文件<code>package.json</code> <a class="header-anchor" href="#_02-配置文件package-json" aria-label="Permalink to &quot;02. 配置文件\`package.json\`&quot;">​</a></h3><h4 id="_1-概念" tabindex="-1">（1）概念 <a class="header-anchor" href="#_1-概念" aria-label="Permalink to &quot;（1）概念&quot;">​</a></h4><ul><li><p><code>npm</code>的配置文件即<code>package.json</code></p><ul><li><p>这个<code>json</code>所在的目录就代表了一个模块，或者说一个包</p></li><li><p>文件中定义了当前模块的各种配置</p></li><li><p>例如：项目的基本信息，名称、版本号、项目描述，依赖关系，构建配置等等</p></li><li><p>也会记录项目依赖的其他库的相关信息</p></li></ul></li><li><p>生成配置文件：<code>npm init -y</code></p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test-project&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A Vue.js project&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/main.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;private&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm run unit&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;keywords&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;license&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ISC&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^2.5.2&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;devDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;autoprefixer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^7.1.2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;babel-core&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^6.22.1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;engines&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;= 6.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;npm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;= 3.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;browserslist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt; 1%&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;last 2 versions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;not ie &lt;= 8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div></li></ul><h4 id="_2-释义" tabindex="-1">（2）释义 <a class="header-anchor" href="#_2-释义" aria-label="Permalink to &quot;（2）释义&quot;">​</a></h4><ul><li><code>name</code> ：设置模块或者项目的名称，是区分<code>npm</code>包的唯一标识</li><li><code>version</code> ：表明了项目的版本，版本应符合<code>semver</code>规范</li><li><code>description</code>： 是项目的简短描述</li><li><code>author</code>：项目作者</li><li><code>license</code>：项目协议</li><li><code>private</code>： 如果设置为 <code>true</code>，表示为私有的，可以防止项目被意外地发布到 <code>npm</code></li><li><code>main</code> ：设置了项目的主入口点</li><li><code>scripts</code> ：定义了一组可以运行的<code>node</code>脚本命令别名</li><li><code>keywords</code>：关键字，用关键字描述项目</li><li><code>dependencies</code> ：设置<strong>项目所依赖</strong>的第三方模块，无论生成环境还是开发环境都需要的包 <ul><li>项目运行时需要的包</li></ul></li><li><code>devDependencies</code> ：设置了作为<strong>开发依赖</strong>安装的 <code>npm</code> 软件包的列表，在生产环境是不需要的 <ul><li>例如开发过程中用到的构建工具、测试框架、代码规范工具等，都作为开发依赖存在</li></ul></li><li><code>engines</code> ：设置了此项目在哪个版本的<code>Node.js</code>上运行，即用于指定<code>Node</code>和<code>Npm</code>的版本号</li><li><code>browserslist</code>： 用于告知要支持哪些浏览器（及其版本）</li></ul><h4 id="_3-拓展" tabindex="-1">（3）拓展 <a class="header-anchor" href="#_3-拓展" aria-label="Permalink to &quot;（3）拓展&quot;">​</a></h4><ul><li><p><code>main</code>字段和<code>export[&#39;.&#39;].require</code>字段，都是用于设置<code>require()</code>方式的加载入口——<code>cjs</code>规范</p></li><li><p><code>module</code>和<code>export.*.import</code>字段，用于设置<code>import</code>的加载入口——<code>esm</code>规范</p></li><li><p><code>types</code> 和 <code>exports.*.types</code> 字段用于设置 <code>d.ts</code> 类型声明的加载入口——<code>TypeScript</code> 专属</p></li></ul><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;types&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.d.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;types&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.d.ts&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./locale/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./locale/*&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-module/locale&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;my-module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_03-锁定版本号package-lock" tabindex="-1">03. 锁定版本号<code>package-lock</code> <a class="header-anchor" href="#_03-锁定版本号package-lock" aria-label="Permalink to &quot;03. 锁定版本号\`package-lock\`&quot;">​</a></h3><ul><li><code>package-lock.json</code>会锁定版本号 <ul><li>当运行<code>npm install</code>时，<code>npm</code>会使用<code>lock</code>文件中固定的版本</li><li>这样，可以保证原项目和新初始化的项目的依赖是一样的</li><li>也就是说，<code>lock</code>文件会导致<code>package.json</code>的版本更新规则不生效</li></ul></li></ul><h3 id="_04-安装过程简析" tabindex="-1">04. 安装过程简析 <a class="header-anchor" href="#_04-安装过程简析" aria-label="Permalink to &quot;04. 安装过程简析&quot;">​</a></h3><ul><li><p>安装过程示意图</p><p><img src="`+e+`" alt="image-20230216221054816" loading="lazy"></p></li><li><p><code>npm</code>在安装时，会检测项目中是否有<code>package-lock.json</code>文件</p></li><li><p><strong>（1）有<code>package-lock</code>文件</strong></p><ul><li>如果有，则先检查<code>lock</code>文件和<code>package.json</code>文件中声明的依赖是否一致 <ul><li>如果<strong>一致</strong>，则使用<code>package-lock.json</code>中的信息，会直接从网络或者缓存中去加载依赖</li><li>如果<strong>不一致</strong>，则使用<code>package.json</code>进行安装，并更新<code>lock</code>文件</li></ul></li></ul></li><li><p><strong>（2）没有<code>package-lock</code>文件</strong></p><ul><li>如果没有，则直接根据<code>package.json</code>文件进行递归构建依赖树 <ul><li>然后，会根据构建好的依赖树，去下载完整的依赖资源</li><li>同时，在下载的时候，会去检查有没有相关的资源缓存 <ul><li>如果<strong>有缓存</strong>，则直接解压到<code>node_modules</code>文件夹中</li><li>如果<strong>不存在</strong>，则从<code>npm</code>远程仓库下载，并添加到缓存中</li></ul></li><li>最后，会生成<code>package-lock.json</code>文件</li></ul></li></ul></li></ul><h3 id="_05-版本控制" tabindex="-1">05. 版本控制 <a class="header-anchor" href="#_05-版本控制" aria-label="Permalink to &quot;05. 版本控制&quot;">​</a></h3><h4 id="_1-semver规范" tabindex="-1">（1）<code>Semver</code>规范 <a class="header-anchor" href="#_1-semver规范" aria-label="Permalink to &quot;（1）\`Semver\`规范&quot;">​</a></h4><ul><li><p><code>npm</code>的包通常需要遵从<code>Semver</code>版本规范</p></li><li><p><code>Semver</code>版本规范是<code>X.Y.Z</code></p><ul><li><code>X</code>：代表主版本号<code>major</code>，表示<strong>不兼容</strong>的<u>API 修改</u></li><li><code>Y</code>：代表次版本号<code>minor</code>，表示<strong>向下兼容</strong>的<u>功能性新增</u></li><li><code>Z</code>：代表修订号<code>patch</code>，表示<strong>向下兼容</strong>的<u>问题修正</u></li></ul></li></ul><h4 id="_2-和-的区别" tabindex="-1">（2）<code>~</code>和<code>^</code>的区别 <a class="header-anchor" href="#_2-和-的区别" aria-label="Permalink to &quot;（2）\`~\`和\`^\`的区别&quot;">​</a></h4><ul><li><code>X.Y.Z</code>：表示一个明确的版本号 <ul><li>始终是<code>1.5.5</code></li></ul></li><li><code>^X.Y.Z</code>：表示需要更新<strong>次版本号</strong>和<strong>修订号</strong>，但主版本号是保持不变的 <ul><li>即<code>1.5.5</code>可以，<code>1.6.5</code>可以，但<code>2.1.5</code>不可以</li></ul></li><li><code>~X.Y.Z</code>：表示只更新<strong>修订号</strong>，即主版本号和次版本号是保持不变的 <ul><li>即<code>1.5.5</code>可以，但<code>1.6.0</code>不可以</li></ul></li></ul><h3 id="_06-发布node包" tabindex="-1">06. 发布<code>node</code>包 <a class="header-anchor" href="#_06-发布node包" aria-label="Permalink to &quot;06. 发布\`node\`包&quot;">​</a></h3><h4 id="_1-发布" tabindex="-1">（1）发布 <a class="header-anchor" href="#_1-发布" aria-label="Permalink to &quot;（1）发布&quot;">​</a></h4><ul><li><p>先注册<code>npm</code>账号</p></li><li><p>然后在命令行登录：<code>npm login</code></p></li><li><p>修改<code>package.json</code></p></li><li><p>发布到<code>npm registry</code>上：<code>npm publish</code></p></li><li><p>在指定了发布为<code>npm</code>包时，以下文件会被提交到<code>npm</code>服务器中</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;LICENSE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;README.md&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><code>private</code>用于指定项目是否为私有包</p></li><li><p><code>publishConfig</code>：当我们的项目需要发布到私有的<code>npm</code>仓库时，需要设置这个对象</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;publishConfig&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;registry&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://selfnpm.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><h4 id="_2-更新" tabindex="-1">（2）更新 <a class="header-anchor" href="#_2-更新" aria-label="Permalink to &quot;（2）更新&quot;">​</a></h4><ul><li>需要修改版本号</li><li>重新运行发布命令</li></ul><h4 id="_3-删除" tabindex="-1">（3）删除 <a class="header-anchor" href="#_3-删除" aria-label="Permalink to &quot;（3）删除&quot;">​</a></h4><ul><li>删除发布的包：<code>npm unpublish</code></li></ul><h4 id="_4-过期" tabindex="-1">（4）过期 <a class="header-anchor" href="#_4-过期" aria-label="Permalink to &quot;（4）过期&quot;">​</a></h4><ul><li>让发布的包过期：<code>npm deprecate</code></li></ul><h3 id="_07-dependencies" tabindex="-1">07. <code>dependencies</code> <a class="header-anchor" href="#_07-dependencies" aria-label="Permalink to &quot;07. \`dependencies\`&quot;">​</a></h3><h4 id="_1-dependencies" tabindex="-1">（1）<code>dependencies</code> <a class="header-anchor" href="#_1-dependencies" aria-label="Permalink to &quot;（1）\`dependencies\`&quot;">​</a></h4><ul><li>项目运行依赖 <ul><li>当作为项目<code>install</code>时，会被安装</li></ul></li></ul><h4 id="_2-devdependencies" tabindex="-1">（2）<code>devDependencies</code> <a class="header-anchor" href="#_2-devdependencies" aria-label="Permalink to &quot;（2）\`devDependencies\`&quot;">​</a></h4><ul><li>项目开发依赖 <ul><li>当作为项目<code>install</code>时，会被安装</li><li>当作为依赖被其它项目引用时，<code>devDependencies</code>中定义的依赖不会被安装</li></ul></li></ul><h4 id="_3-peerdependencies" tabindex="-1">（3）<code>peerDependencies</code> <a class="header-anchor" href="#_3-peerdependencies" aria-label="Permalink to &quot;（3）\`peerDependencies\`&quot;">​</a></h4><ul><li><p>项目等同依赖</p><ul><li>当作为项目<code>install</code>时，不会被安装，需要配合<code>devDependencies</code>一起使用 <ul><li>或者说，它的作用就类似于<code>devDependencies</code>，只是它作用的是项目</li></ul></li><li>当作为依赖被其它项目引用时，包管理器会检查项目的依赖与 <code>peerDependencies</code> 是否匹配，如果版本不匹配或未安装，将会弹出警告</li><li>主要是为了避免项目中和依赖包中出现重复安装包所导致的包版本不相容、打包了多份不同版本的库等问题</li></ul></li><li><p>释义：</p><ul><li>如果某个子项目内有<code>peerDependencies</code>，那么它会告诉<code>npm</code></li><li>如果你把我列为依赖项，那么你还需要有我的<code>peerDependencies</code>中的依赖项</li><li>类似于下面这种</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 伪代码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">packageA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package.json</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	devpendencies:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packageB</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 生命在 devpendencies 中</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 则安装后</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	node_modules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		packageA</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			node_modules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">				packageB</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">packageA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package.json</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	peerDevpendencies:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packageB</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 声明在 peerDenpendencies 中</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 则安装后</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	node_modules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		packageA</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		packageB</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li><li><p>存在问题</p><ul><li>如果将依赖包放在<code>dependencies</code>下，那么我们在另一个地方引用时，会出现下述情况： <ul><li>如果没有引入所需的依赖包，那么<code>devdependencies</code>中所依赖的包会被安装</li><li>如果引入了所需的依赖包，则会判断版本号 <ul><li>版本号一致，那么的依赖包不会被安装，会共享同一个版本的依赖包</li><li>版本号不一致，那么依赖包就会被安装，且项目里会同时存在不同版本号的依赖包 <ul><li>引用两个版本的依赖包，会导致使用的实例不一致，导致方法失效</li></ul></li></ul></li></ul></li><li><s>如果将依赖包放在<code>peerDependencies</code>下，会出现以下情况</s><ul><li><s>单独开发这个项目时，所需的依赖不会安装，会在开发时报错找不到依赖</s></li></ul></li></ul></li><li><p>总结</p><ul><li><code>peerDependencies</code>是希望宿主环境有其中定义的依赖项</li><li>它的作用就是，提示宿主环境去安装满足<code>peerDependencies</code>中指定的依赖项</li><li>如果宿主环境没有安装指定的依赖项，那么在终端会有相应提示</li><li>这样所有的项目通过<code>import | require</code>引用的都是相同版本的<code>npm</code>包</li><li>防止重复安装冗余的依赖包</li></ul></li></ul>`,38),t=[p];function d(h,o,c,k,r,u){return a(),i("div",null,t)}const b=s(l,[["render",d]]);export{g as __pageData,b as default};
